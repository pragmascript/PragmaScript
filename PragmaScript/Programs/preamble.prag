import "windows.prag"

let null = (mm)0;
let pi: f64 = 3.141592653589793238462643383279502884197;
let half_pi = pi / 2.0;
let pi_32 = (f32)pi;
let half_pi_32 = (f32)half_pi;

let _rdtsc = extern fun () => i64;

let assert = fun (value: bool) => void 
{
	if (!value) {
		*nullptr = 42;
	}
}

let cstr = fun(value: string) => i8* 
{
	assert(value[value.length - 1] == 0);
	return value.data;
}

// // https://git.musl-libc.org/cgit/musl/tree/src/math
// let fmodf = fun(x: f32; y: f32) => f32
// {
// 	var result = x / y;
// 	return 3.0;
// }
let remainder = fun(x: f32; y: f32) => f32
{
	return x - floor(x/y)*y;
}


let sinf = fun(x: f32) => f32 
{
    let p = 0.225;
    let a = 16 * sqrt(p);
    let b = (1 - p) / sqrt(p);

    var y = x / (2 * pi_32);
    y = y - floor(y + 0.5);  // y in range -0.5..0.5
    y = a * y * (0.5 - abs(y));
    return y * (b + abs(y));
}

// http://forum.devmaster.net/t/fast-and-accurate-sine-cosine/9648/85
let cosf = fun(value: f32) => f32 
{
	var x = half_pi_32 - value;
    let p = 0.225;
    let a = 16 * sqrt(p);
    let b = (1 - p) / sqrt(p);

    var y = x / (2 * pi_32);
    y = y - floor(y + 0.5);  // y in range -0.5..0.5
    y = a * y * (0.5 - abs(y));
    return y * (b + abs(y));
}

let lerp = fun(a: f32; b: f32; t: f32) => f32
{
	return a + (b-a)*t;
}

let abs_i32 = fun (value: i32) => i32
{
  if (value >= 0) {
    return value;
  } else {
    return -value;
  }
}

let print_i32 = fun (value: i32; signed: bool) => void
{
	if (signed)
	{
		print_i64((i64)value, true);
	}
	else
	{
		print_i64((i64\)value, false);
	}
}

let print_i64 = fun (value: i64; signed: bool) => void
{
	var v = value;
	var pd = print_dest { };
	pd.buffer = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
	assert(pd.buffer.length == 64); 
	pd.pos = 0;
	if (signed && v < 0) {
		v = -v;
		out_char(&pd, 45);
	}
	u64_to_ascii(&pd, v);
	pd.buffer.length = pd.pos;
	print_string(pd.buffer);
}

let print_f32 = fun (value: f32) => void
{
	print_f64(((f64)value));	
}

let print_dest = struct
(
	buffer: string;
	pos: i32;
);

let out_char = fun (dest: print_dest*; char: i8) => void
{
	dest.buffer[dest.pos++] = char;
} 

var decimal_digits = "0123456789";
let u64_to_ascii = fun (dest: print_dest*; value: i64) => void
{
	let base = 10;
	var v = value;

	var start = &dest.buffer[dest.pos];
	while (true) {
		var index = v % (i64)base;
		var digit = decimal_digits[(i32)index];
		out_char(dest, digit);
		v /\= (i64)base;
		if (v == 0) {
			break;
		}
	}
	var end = &dest.buffer[dest.pos];
	
	while((mm)start < (mm)end) {
		--end;
		var temp = *end;
		*end = *start;
		*start = temp;
		++start;
	}
}

let print_f64 = fun (value: f64) => void
{
	let precision = 4;

	var v = value;
	var pd = print_dest { };
	pd.buffer = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
	assert(pd.buffer.length == 64); 
	pd.pos = 0;
	if (v < 0) {
		v = -v;
		out_char(&pd, 45);
	}
	var int_part = (i64)v;
	u64_to_ascii(&pd, int_part);
	v -= (f64)int_part;
	out_char(&pd, 46);

	var first_fraction_char = pd.pos;
	var last_non_zero = pd.pos;
	for (var i = 0; i < precision; ++i) {
		v *= 10.0;
		var int_part = (i32)v;
		v -= (f64)int_part;
		assert(int_part < 10);
		out_char(&pd, decimal_digits[int_part]);
		if (int_part != 0) {
			last_non_zero = pd.pos;
		} 
	}
	
	assert(pd.pos < pd.buffer.length);

	// if (first_fraction_char != last_non_zero) {
	// 	pd.buffer.length = last_non_zero;
	// } else {
	// 	pd.buffer.length = first_fraction_char - 1;
	// }
	pd.buffer.length = pd.pos;
	print_string(pd.buffer);
}


let debug_print_i64 = fun (name: string; value: i64; signed: bool) => void
{
	print_string(name);
	print_string(": ");
	print_i64(value, signed);
	print_string("\n");
}

let debug_print_i32 = fun (name: string; value: i32; signed: bool) => void
{
	print_string(name);
	print_string(": ");
	print_i32(value, signed);
	print_string("\n");
}
let debug_print_f32 = fun (name: string; value: f32) => void
{
	print_string(name);
	print_string(": ");
	print_f32(value);
	print_string("\n");
}