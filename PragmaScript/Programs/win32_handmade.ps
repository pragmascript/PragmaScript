let offscreen_buffer = struct
(
	info:   BITMAPINFO;
	memory: ptr;
	width:  i32;
	height: i32;
	pitch:  i32;
);
let window_info = struct 
(
	handle: umm;
	dc: umm;
	width: i32;
	height: i32;
);

var running = false;
var backbuffer: offscreen_buffer;
var window: window_info;
var x_offset = 0;
var y_offset = 0;
var z_offset = 0;

let load_x_input = fun () => void {
	var x_input_lib = LoadLibraryA(cstr("xinput1_4.dll\0"));
	if (x_input_lib == null) {
		x_input_lib = LoadLibraryA(cstr("xinput1_3.dll\0"));
	}
	if (x_input_lib != null) {
		XInputGetState = (x_input_get_state)GetProcAddress(x_input_lib, cstr("XInputGetState\0"));
		assert((umm)XInputGetState != null);
	}
}

let handle_x_input = fun () => void {
	for(var c_idx = 0; c_idx < XUSER_MAX_COUNT; ++c_idx) {
		var x_state : XINPUT_STATE;
		var x_result = XInputGetState((u32)c_idx, &x_state); 
		if (x_result == XINPUT_SUCCESS)
		{
			// TODO: decode input
		}
		elif (x_result == XINPUT_DEVICE_NOT_CONNECTED)
		{
		}
	}
}

let bytes_per_pixel = 4;
let render_weird_gradient = fun (buffer: offscreen_buffer*; x_offset: i32; y_offset: i32; z_offset: i32) => void {
	var width  = buffer.width;
	var height = buffer.height;
	var pitch  = buffer.pitch;
	var row = (u8*)buffer.memory;
	for (var j = 0; j < height; ++j) {
		var pixel = (u32*)row;
		for (var i = 0; i < width; ++i) {
			var x = i + x_offset;
			var y = j + y_offset;
			var r = (u8)(x^y^z_offset);
			var g = (u8)y;
			var b = (u8)x;
			*pixel = ((u32)r << 16) | ((u32)g << 8) | (u32)b;
			pixel++;
		}
		row += pitch;
	}
}

let create_backbuffer = fun (buffer: offscreen_buffer*; width: i32; height: i32) => void {
	buffer.width = width;
	buffer.height = height;
	buffer.info.header.biSize = (u32)40;
	buffer.info.header.biWidth = width;
	buffer.info.header.biHeight = -height;
	buffer.info.header.biPlanes = (u16)1;
	buffer.info.header.biBitCount = (u16)32;
	buffer.info.header.biCompression = (u32)BI_RGB;
	var bitmap_size = bytes_per_pixel * width * height;
	if ((umm)buffer.memory != (umm)nullptr) {
		VirtualFree(buffer.memory, null, MEM_RELEASE);
	}
	buffer.memory = VirtualAlloc(nullptr, (umm)bitmap_size, MEM_COMMIT, PAGE_READWRITE);
	buffer.pitch = buffer.width * bytes_per_pixel;
}

let blit_to_screen = fun (buffer: offscreen_buffer*) => void {
    StretchDIBits(window.dc,
		0, 0, window.width, window.height,
		0, 0, buffer.width, buffer.height,
		buffer.memory, &buffer.info,
		DIB_RGB_COLORS, SRCCOPY
		);
}

let update_window_rect = fun () => void {
	var rect: RECT;
	GetClientRect(window.handle, &rect); 
	window.width = rect.right - rect.left;
	window.height = rect.bottom - rect.top;
}

let main_window_callback =
fun (window_handle: umm; message: u32; w_param: umm; l_param: umm) => umm {
	var result = null;
	if (message == WM_SIZE) {
		update_window_rect();	
	}
	elif (message == WM_CLOSE) {
		running = false;
	}
	elif (message == WM_DESTROY) {
		running = false;
	}
	elif (message == WM_PAINT) {
		var paint: PAINTSTRUCT;
		var context = BeginPaint(window_handle, &paint);
		blit_to_screen(&backbuffer);
		EndPaint(window_handle, &paint);
	} 
	elif (message == WM_SYSKEYDOWN 
		  || message == WM_SYSKEYUP
		  || message == WM_KEYDOWN
		  || message == WM_KEYUP) {

		var vk_code = (u32)w_param;
		var was_down = (l_param & (umm)(1 << 30)) != (umm)0;
		var is_down = (l_param & (umm)(1 << 31)) == (umm)0;
		var key_up = was_down && !is_down;
		var key_down = !was_down && is_down; 

		if(vk_code == VK_ESCAPE) {
			running = false;
		} elif (vk_code == VK_LEFT) {
			x_offset += 10;
		} elif (vk_code == VK_RIGHT) {
			x_offset -= 10;
		} elif (vk_code == VK_UP) {
			y_offset += 10;
		} elif (vk_code == VK_DOWN) {
			y_offset -= 10;
		} else {
			// if (key_down) {
			// 	print_string("key_down: ");
			// 	print_i32((i32)vk_code);
			// 	print_string("\n");
			// }
			// if (key_up) {
			// 	print_string("key_up: ");
			// 	print_i32((i32)vk_code);
			// 	print_string("\n");
			// }
		}
	}
	else {
		result = DefWindowProcA(window_handle, message, w_param, l_param);
	} 
	return result;
}

let main = fun () => void {
	load_x_input();
	create_backbuffer(&backbuffer, 1244, 705);

	var class_name  = cstr("PragmaScriptWindowClass\0");
	var window_name = cstr("handmade-pragmascript\0");
	var instance = GetModuleHandleA(null);
	var window_class: WNDCLASSEX;
	window_class.cbSize = (u32)80;
	window_class.style = (u32)(CS_HREDRAW|CS_VREDRAW);
	window_class.lpfnWndProc = (ptr)main_window_callback;
	window_class.cbClsExtra = 0;
	window_class.cbWndExtra = 0;
	window_class.hInstance = instance;
	window_class.hIcon = null;
	window_class.hCursor = null;
	window_class.hbrBackground = null;
	window_class.lpszMenuName = nullptr;
	window_class.lpszClassName = class_name;
	window_class.hIconSm = null;
	RegisterClassExA(&window_class);
	
	window.handle = CreateWindowExA(
		0,
		class_name,
		window_name,
		WS_OVERLAPPEDWINDOW|WS_VISIBLE,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		null,
		null,
		instance,
		null
	);
	window.dc = GetDC(window.handle);
	update_window_rect();

	// init_direct_sound();

	running = true;
	while (running) {
		var msg: MSG;
		while (PeekMessageA(&msg, null, (u32)0, (u32)0, PM_REMOVE) != 0) {
			if (msg.message == WM_QUIT) {
				running = false;
			}
			TranslateMessage(&msg);
			DispatchMessageA(&msg);
		}
		render_weird_gradient(&backbuffer, x_offset, y_offset, z_offset);
		blit_to_screen(&backbuffer);
	}
    ExitProcess((u32)0);
}
