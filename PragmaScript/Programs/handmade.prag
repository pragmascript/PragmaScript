import "preamble.prag"
import "windows.prag"
import "win32_handmade.prag"

var x_offset = 0.0;
var y_offset = 0.0;

var sound_t_sine = 0.0;
var sound_volume = 0.05;
var sound_tone_hz = 256.0;

let sound_samples_per_second = 48000;
let sound_wave_period = 2 * pi_32 / (f32)sound_samples_per_second;

let game_sound_output = struct
(
    sample_out: i16*;
    sample_count: i32;
    samples_per_second: i32;
);

let game_input = struct
(
	upPressed: bool;
	leftPressed: bool;
	rightPressed: bool;
	downPressed: bool;
);

let game_render_target = struct 
(
    memory: ptr;
	width:  i32;
	height: i32;
	pitch:  i32;
);

let game_update_and_render = fun
(
    dt: f32;
    input: game_input*;
    render_target: game_render_target*;
    sound_output: game_sound_output*;
) => void
{
    handle_player_input(input, dt);
    output_sound(sound_output);
    render_weird_gradient(render_target);
}

let handle_player_input = fun 
(
    game_input: game_input*; 
    dt: f32; 
) => void 
{
	if (game_input.leftPressed) {
		x_offset += dt * 150.0;
        sound_volume -= dt * 0.02;
        if (sound_volume < 0) {
            sound_volume = 0;
        }
	}
	if (game_input.rightPressed) {
		x_offset -= dt * 150.0;
        sound_volume += dt * 0.02;
	}
	if (game_input.upPressed) {
		y_offset += dt * 150.0;
		sound_tone_hz += dt * 20.0;
	}
	if (game_input.downPressed) {
		y_offset -= dt * 150.0;
		sound_tone_hz -= dt * 20;
		if (sound_tone_hz < 0) {
			sound_tone_hz = 0;
		}
	}
}

let output_sound = fun (sound_output: game_sound_output*) => void 
{
    var wave_period = 2 * pi_32 / (f32)sound_output.samples_per_second;
    var sample = sound_output.sample_out;
    assert((mm)sample != null);
    var sample_count = sound_output.sample_count;
    for (var i: i32 = 0; i < sample_count; ++i) {
        var x = (i16)(32767 * sound_volume * sinf(sound_t_sine));
        *sample++ = x;
        *sample++ = x;
        sound_t_sine += sound_tone_hz * wave_period;
    }
    sound_t_sine = remainder(sound_t_sine, 2*pi_32);
}

let render_weird_gradient = fun (buffer: game_render_target*) => void 
{
    var dx = (i32)x_offset;
    var dy = (i32)y_offset;
	var width  = buffer.width;
	var height = buffer.height;
	var pitch  = buffer.pitch;
	var row = (i8*)buffer.memory;
	for (var j = 0; j < height; ++j) {
		var pixel = (i32*)row;
		for (var i = 0; i < width; ++i) {
			var x = i + dx;
			var y = j + dy;
			var r = (i8)(x^y^(x+y));
			var g = (i8)y;
			var b = (i8)x;
			*pixel = ((i32\)r << 16) | ((i32\)g << 8) | (i32\)b;
			pixel++;
		}
		row += pitch;
	}
}