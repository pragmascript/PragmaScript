// let sphere = struct
// {
// 	pos:    vec;
// 	radius: float32;
// }
// var s = sphere{};
// s.pos = vec{1.0,2.0,3.0};

let vec = struct 
(
	x: f32;
	y: f32;
	z: f32;
);

// let sphere = struct
// {
// 	point: vec;
// 	radius: f32;
// }

// let foo = fun (s: sphere) => void {
// 	print_i32((i32)s.point.x);
// }

// let __test__assignment = fun () => void {
// 	{
// 		var x = 3;
// 		var y = 5;
// 		x += y += 7 ;
// 	}
// 	{
// 		var x = 3;
// 		var px = &x;
// 		*px = 12;
// 	}
// }

// let __test__ref_deref = fun () => void {
// 	var x = 12;
// 	var y = &x;
// 	var z = *y;
// 	print_i32(z);
// 	print_string("\n");
// 	*y = 17;
// 	print_i32(*y);
// }

// var global_x: i32;
// var global_y = 12;
// var global_z = 2 + 3;
// var global_v: vec;
// var global_v2 = vec {1.0, 2.0, 3.0};

// let __test_assignment = fun () => void {
// 	var y: i32;
// 	y = 17;
// 	var x = 13;
// 	var z: i32 = x + y;
// }

// let __test_size_of = fun () => void {
// 	print_string("sizeof(i64): ");
// 	print_i32((i32)sizeof(i64));
// 	print_string("\n");

// 	print_string("sizeof(i32): ");
// 	print_i32((i32)sizeof(i32));
// 	print_string("\n");

// 	print_string("sizeof(u16): ");
// 	print_i32((i32)sizeof(u16));
// 	print_string("\n");

// 	print_string("sizeof(i8): ");
// 	print_i32((i32)sizeof(i8));
// 	print_string("\n");

// 	print_string("sizeof(vec): ");
// 	print_i32((i32)sizeof(vec));
// 	print_string("\n");
// }


let list = struct
(
	value: i32;
	next: list*;
);
let Foo = struct
(
	bar: Bar*;
);
let Bar = struct
(
	foo: Foo*;
);

let main = fun () => void 
{
	
	// var g = list {};
	// var foo = 12;
	// l.next = &g; 

	print_string("hello world\n");
	
	// g.next = &foo;
	// var x = 12;
	// var y = &x;
	// var z = *y;
	// // print_i32(z);
	// // print_string("\n");

	// *y = 17;
	// assert(x == 17);
	// assert(*y == 17);
	
	var a = list {};
	a.value = 7;
	var b = list {};
	b.value = 12;
	var c = list {};
	c.value = 32;
	a.next = &b;
	b.next = &c;

	
	for (var l = &a; (umm)l != null; l = l.next)
	{
		print_i32(l.value);
		print_string("\n");
	}
	
	// print_i32(*y);
}

