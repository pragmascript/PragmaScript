// TODO: 
// var result = i8[] { 11 }; // DEADLOCKS typechecker
// for (var i = 0; i < result.length; ++i) {
// 		result[i] = (int8)i;
// }

// TODO: uninitialized array has wrong format.
// var result = int8[] { 11 };
// if (value < 0) {
// 	result[0] = (int8)45;
// }

// let sphere = struct
// {
// 	pos:    vec;
// 	radius: float32;
// }
// var s = sphere{};
// s.pos = vec{1.0,2.0,3.0};

let print_string = (s: string) => 
{
 	var handle = GetStdHandle(-11);
 	WriteFile(handle, s.data, s.length, nullptr, nullptr);
}


let abs_i32 = (value: int32) => 
{
  if (value >= 0) {
    return value;
  } else {
    return -value;
  }
}

let print_i32 = (value: int32) => 
{
	if (value == 0) {
		print_string("0");
		return;
	}
	var x = value;
	var temp = "\0\0\0\0\0\0\0\0\0\0";
	var count = 0;
	for (var i = 0; i < temp.length; ++i) {
		if (x != 0) {
			var d = abs_i32(x % 10);
			temp[i] = (int8)(d + 48);
			x = x / 10;
			count++;
		} else {
			break;
		}
	}
	var offset = 0;
	if (value < 0) {
		offset = 1;
	}
	var result = "\0\0\0\0\0\0\0\0\0\0\0";
	if (value < 0) {
		result[0] = (int8)45;
	}
	for (var i = 0; i < count; ++i) {
		result[i+offset] = temp[count - i - 1];
	}
	result.length = count + offset;
	print_string(result);
}


let print_f32 = (value: float32) => 
{
	var int_part = (int32)value;
	var float_part = (int32)((value - (float32)int_part) * 1000.0);
	print_i32(int_part);
	print_string(".");
	print_i32(float_part);
}

let print_i32_array = (a: int32[]) => 
{
	var comma = ", ";
	for (var i = 0; i < a.length; ++i) {
		print_i32(a[i]);
		print_string(comma);
	}
}


var x = [128, 127, 126, 125, 124, 123, 122, 121];

// for (var i = 0; i < x.length; ++i) {
// 	x[i] = 0;
// }

print_i32_array(x);

