import "preamble.prag"
import "windows.prag"
import "math.prag"
import "memory.prag"

import "zlib.prag"


let bitmap = struct (
    width: i32;
    height: i32;
    pixels: i8*;
);

let png_info = struct(
    width: i32;
    height: i32;
    compressed_data: memory_arena;
);

let png_stream = struct(
    f: i8[];
    info: png_info;
);

["PACKED"]
let png_chunk_header = struct(
    length: i32;
    type: i8[4];
);
["PACKED"]
let ihdr = struct(
    width: i32;
    height: i32;
    bit_depth: i8;
    color_type: i8;
    compression_method: i8;
    filter_method: i8;
    interlace_method: i8;
);

let advance = fun(stream: png_stream*; bytes: mm) => void {
    assert(stream.f.length >= bytes@i32);
    stream.f.data += bytes;
    stream.f.length -= bytes@i32;
}

let read_chunk_header = fun(stream: png_stream*) => png_chunk_header {
    var result: png_chunk_header;
    result = *(stream.f.data@png_chunk_header*);
    endian_swap(&result.length);
    advance(stream, size_of(png_chunk_header));
    return result;
}

let read_ihdr = fun(stream: png_stream*) => ihdr {
    var result = *(stream.f.data@ihdr*);
    endian_swap(&result.width);
    endian_swap(&result.height);
    advance(stream, size_of(ihdr));
    return result;
}

let read_next_chunk = fun(stream: png_stream*) => void {
    var header = read_chunk_header(stream);
    
    var chunk_str = header.type[:];
    // debug_print("reading_chunk", chunk_str);
    
    if (strings_are_equal(chunk_str, "IHDR")) {
        assert(header.length == size_of(ihdr)@i32);
        var ihdr = read_ihdr(stream);
        assert(ihdr.bit_depth == 8);
        assert(ihdr.color_type == 6);
        assert(ihdr.compression_method == 0);
        assert(ihdr.filter_method == 0);
        assert(ihdr.interlace_method == 0);
        stream.info.width = ihdr.width;
        stream.info.height = ihdr.height;
    } 
    elif (strings_are_equal(chunk_str, "IDAT")) {
        assert(stream.info.width > 0);
        assert(stream.info.height > 0);
        var dst = push(&stream.info.compressed_data, header.length@mm);
        var src = stream.f.data;
        CopyMemory(dst, src, header.length@mm);
        advance(stream, header.length@mm);
    }
    else {
        advance(stream, header.length@mm);
    }
    
    // TODO(pragma): check crc
    advance(stream, 4);
}

let channel = fun(pixel: i32*; idx: i32) => i32 {
    var byte_ptr = pixel@i8*;
    assert(idx >= 0 && idx < 4);
    var result = (*(byte_ptr + idx))@\i32;
    return result;
}

let paeth = fun(a: i32; b: i32; c: i32) => i32 {
    var p = a + b - c;
    var pa = Math::abs(p - a);
    var pb = Math::abs(p - b);
    var pc = Math::abs(p - c);
    if (pa <= pb && pa <= pc) {
        return a;
    }
    if (pb <= pc) {
        return b;
    }
    return c;
    
}

let trunc_to_byte = fun(value: i32) => i8 {
    return (value & 255)@\i8;
}

let apply_png_filters = fun(scanlines: ptr; bmp: bitmap) => void {
    var width = bmp.width;
    var height = bmp.height;
    var src_ptr = scanlines;
    var dst_ptr = bmp.pixels;
    var dst_ptr_prev_row = dst_ptr;
    var row_byte_offset = width * 4;
    
    for (var scanline_idx = 0; scanline_idx < height; ++scanline_idx) {
        // skip png filter byte
        var filter = *src_ptr++;
        if (filter == 0) {
            memcpy(dst_ptr, src_ptr, row_byte_offset@mm);
            src_ptr += row_byte_offset;
            dst_ptr += row_byte_offset;
            if (scanline_idx != 0) {
                dst_ptr_prev_row += row_byte_offset;
            }
        }
        elif (filter == 1) {
            var pixel_b = 0;
            for (var x = 0; x < width; ++x) {
                *(dst_ptr + 0) = trunc_to_byte(channel(src_ptr@i32*, 0) + channel(&pixel_b, 0));
                *(dst_ptr + 1) = trunc_to_byte(channel(src_ptr@i32*, 1) + channel(&pixel_b, 1));
                *(dst_ptr + 2) = trunc_to_byte(channel(src_ptr@i32*, 2) + channel(&pixel_b, 2));
                *(dst_ptr + 3) = trunc_to_byte(channel(src_ptr@i32*, 3) + channel(&pixel_b, 3));
                pixel_b = *(dst_ptr@i32*);
                src_ptr += 4;
                dst_ptr += 4;
            }
            if (scanline_idx != 0) {
                dst_ptr_prev_row += row_byte_offset;
            }
        }
        elif (filter == 2) {
            var pixel_b = 0;
            for (var x = 0; x < width; ++x) {
                if (scanline_idx != 0) {
                    pixel_b = *(dst_ptr_prev_row@i32*);
                    dst_ptr_prev_row += 4;
                }
                *(dst_ptr + 0) = trunc_to_byte(channel(src_ptr@i32*, 0) + channel(&pixel_b, 0));
                *(dst_ptr + 1) = trunc_to_byte(channel(src_ptr@i32*, 1) + channel(&pixel_b, 1));
                *(dst_ptr + 2) = trunc_to_byte(channel(src_ptr@i32*, 2) + channel(&pixel_b, 2));
                *(dst_ptr + 3) = trunc_to_byte(channel(src_ptr@i32*, 3) + channel(&pixel_b, 3));
                src_ptr += 4;
                dst_ptr += 4;
            }
        }
        elif (filter == 3) {
            var pixel_a = 0;
            var pixel_b = 0;
            for (var x = 0; x < width; ++x) {
                if (scanline_idx != 0) {
                    pixel_b = *(dst_ptr_prev_row@i32*);
                    dst_ptr_prev_row += 4;
                }
                *(dst_ptr + 0) = trunc_to_byte(channel(src_ptr@i32*, 0) + ((channel(&pixel_a, 0) + channel(&pixel_b, 0)) / 2));
                *(dst_ptr + 1) = trunc_to_byte(channel(src_ptr@i32*, 1) + ((channel(&pixel_a, 1) + channel(&pixel_b, 1)) / 2));
                *(dst_ptr + 2) = trunc_to_byte(channel(src_ptr@i32*, 2) + ((channel(&pixel_a, 2) + channel(&pixel_b, 2)) / 2));
                *(dst_ptr + 3) = trunc_to_byte(channel(src_ptr@i32*, 3) + ((channel(&pixel_a, 3) + channel(&pixel_b, 3)) / 2));
                pixel_a = *(dst_ptr@i32*);
                
                src_ptr += 4;
                dst_ptr += 4;
            }
        }
        elif (filter == 4) {
            var pixel_a = 0;
            var pixel_b = 0;
            var pixel_c = 0;
            for (var x = 0; x < width; ++x) {
                if (scanline_idx != 0) {
                    pixel_b = *(dst_ptr_prev_row@i32*);
                    dst_ptr_prev_row += 4;
                }
                *(dst_ptr + 0) = trunc_to_byte(channel(src_ptr@i32*, 0) + paeth(channel(&pixel_a, 0), channel(&pixel_b, 0), channel(&pixel_c, 0)));
                *(dst_ptr + 1) = trunc_to_byte(channel(src_ptr@i32*, 1) + paeth(channel(&pixel_a, 1), channel(&pixel_b, 1), channel(&pixel_c, 1)));
                *(dst_ptr + 2) = trunc_to_byte(channel(src_ptr@i32*, 2) + paeth(channel(&pixel_a, 2), channel(&pixel_b, 2), channel(&pixel_c, 2)));
                *(dst_ptr + 3) = trunc_to_byte(channel(src_ptr@i32*, 3) + paeth(channel(&pixel_a, 3), channel(&pixel_b, 3), channel(&pixel_c, 3)));
                
                pixel_a = *(dst_ptr@i32*);
                pixel_c = pixel_b;
                src_ptr += 4;
                dst_ptr += 4;
            }
        }
        else {
            assert(false);
        }
        assert((dst_ptr - dst_ptr_prev_row)@i32 == row_byte_offset);
    }
}

let load_png = fun(file: string) => bitmap {
    var result = bitmap { };
    
    // TODO(pragma): determine file size
    var arena = create_arena(megabytes(35));
    var f = read_file(file, &arena);
    assert(f.length > 0);
    
    var magic = f.data[:8];
    var compare_magic = [@i8 137, 80, 78, 71, 13, 10, 26, 10];
    assert(strings_are_equal(magic, compare_magic[:]));

    var stream = png_stream { f, png_info{} };
    stream.info.compressed_data = create_arena(f.length@mm);
    advance(&stream, 8);
    
    while (stream.f.length > 0) {
        read_next_chunk(&stream);
    }
    assert(stream.f.length == 0);
    assert(stream.info.compressed_data.used > 0);
    
    var width = stream.info.width;
    var height = stream.info.height;
    
    var size = width * height * 4 + height;  // RGBA 
    var scanlines = allocate(size@mm);
    decompress(get_slice(&stream.info.compressed_data), scanlines[:size]);
    
    result.pixels = allocate(@mm (width * height * 4));
    result.width = width;
    result.height = height;
    
    apply_png_filters(scanlines, result);
    
    return result;
    
}
