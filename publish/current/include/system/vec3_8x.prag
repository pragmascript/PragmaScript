import "preamble.prag"
import "math.prag"
import "simd.prag"

let v3_8x = struct 
(
    x: f32_8x;
    y: f32_8x;
    z: f32_8x;print(", ");
);

let v3 = fun (x: f32_8x; y: f32_8x; z: f32_8x) => v3_8x {
    var result = v3_8x { x, y, z};
    return result;
}

var v3z_8x = v3_8x { SIMD::ZERO_f32_8x , SIMD::ZERO_f32_8x, SIMD::ZERO_f32_8x};
let add = fun (a: v3_8x*; b: v3_8x*) => v3_8x {
    var result = v3_8x { a.x + b.x, a.y + b.y, a.z + b.z};
    return result;
}
let add = fun (a: v3_8x; b: v3_8x) => v3_8x {
    var result = v3_8x { a.x + b.x, a.y + b.y, a.z + b.z};
    return result;
}
let sub = fun (a: v3_8x*; b: v3_8x*) => v3_8x {
    var result = v3_8x { a.x - b.x, a.y - b.y, a.z - b.z};
    return result;
}
let sub = fun (a: v3_8x; b: v3_8x) => v3_8x {
    var result = v3_8x { a.x - b.x, a.y - b.y, a.z - b.z};
    return result;
}
let scaled = fun (a: v3_8x*; s: f32_8x) => v3_8x {
    var result = v3_8x { a.x * s, a.y * s, a.z * s};
    return result;
}
let scaled = fun (a: v3_8x; s: f32_8x) => v3_8x {
    var result = v3_8x { a.x * s, a.y * s, a.z * s};
    return result;
}
let hadamard = fun (a: v3_8x*; b: v3_8x*) => v3_8x {
    var result = v3_8x { a.x * b.x, a.y * b.y, a.z * b.z};
    return result;
}
let hadamard = fun (a: v3_8x; b: v3_8x) => v3_8x {
    var result = v3_8x { a.x * b.x, a.y * b.y, a.z * b.z};
    return result;
}
let normalize = fun (@a: v3_8x*) => void {
    var sqrs = x*x + y*y + z*z;
    var scl = f32_8x {
        1.0 / Math::sqrt(sqrs[0]),
        1.0 / Math::sqrt(sqrs[1]),
        1.0 / Math::sqrt(sqrs[2]),
        1.0 / Math::sqrt(sqrs[3]),
        1.0 / Math::sqrt(sqrs[4]),
        1.0 / Math::sqrt(sqrs[5]),
        1.0 / Math::sqrt(sqrs[6]),
        1.0 / Math::sqrt(sqrs[7])
    };
    x *= scl;
    y *= scl;
    z *= scl;
}
let normalized = fun (v: v3_8x*) => v3_8x {
    var result = *v;
    normalize(&result);
    return result;
}
let normalized = fun (v: v3_8x) => v3_8x {
    var result = v;
    normalize(&result);
    return result;
}
let length = fun(@a: v3_8x*) => f32_8x {
    var sqrs = x*x + y*y + z*z;
    var result = f32_8x {
        Math::sqrt(sqrs[0]),
        Math::sqrt(sqrs[1]),
        Math::sqrt(sqrs[2]),
        Math::sqrt(sqrs[3]),
        Math::sqrt(sqrs[4]),
        Math::sqrt(sqrs[5]),
        Math::sqrt(sqrs[6]),
        Math::sqrt(sqrs[7])
    };
    return result;
}
let length = fun(@a: v3_8x) => f32_8x {
    var sqrs = x*x + y*y + z*z;
    var result = f32_8x {
        Math::sqrt(sqrs[0]),
        Math::sqrt(sqrs[1]),
        Math::sqrt(sqrs[2]),
        Math::sqrt(sqrs[3]),
        Math::sqrt(sqrs[4]),
        Math::sqrt(sqrs[5]),
        Math::sqrt(sqrs[6]),
        Math::sqrt(sqrs[7])
    };
    return result;
}
let sqr_length = fun(@a: v3_8x*) => f32_8x {
    var result = x*x + y*y + z*z;
    return result;
}
let sqr_length = fun(@a: v3_8x) => f32_8x {
    var result = x*x + y*y + z*z;
    return result;
}
let dot = fun (a: v3_8x*; b: v3_8x*) => f32_8x {
    var result = a.x*b.x + a.y*b.y + a.z*b.z;
    return result;
}
let dot = fun (a: v3_8x; b: v3_8x) => f32_8x {
    var result = a.x*b.x + a.y*b.y + a.z*b.z;
    return result;
}
let cross = fun (a: v3_8x*; b: v3_8x*) => v3_8x {
    var result = v3_8x 
    { 
        a.y * b.z - a.z * b.y, 
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    };
    return result;
}
let cross = fun (a: v3_8x; b: v3_8x) => v3_8x {
    var result = v3_8x 
    { 
        a.y * b.z - a.z * b.y, 
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    };
    return result;
}
let get_orthogonal = fun (v: v3_8x*) => v3_8x {
    var c0 = v3_8x {
        SIMD::set1_ps_256(1.0),
        SIMD::set1_ps_256(0.0),
        SIMD::set1_ps_256(0.0)
    };
    var c1 = v3_8x {
        SIMD::set1_ps_256(0.0),
        SIMD::set1_ps_256(1.0),
        SIMD::set1_ps_256(0.0)
    };
    var result = cross(v, &c0);
    // if (sqr_length(&result) < 0.0001) {
    //     result = cross(v, &c1);
    // }
    return result;
}
let get_orthogonal = fun (v: v3_8x) => v3_8x {
        var c0 = v3_8x {
        SIMD::set1_ps_256(1.0),
        SIMD::set1_ps_256(0.0),
        SIMD::set1_ps_256(0.0)
    };
    var c1 = v3_8x {
        SIMD::set1_ps_256(0.0),
        SIMD::set1_ps_256(1.0),
        SIMD::set1_ps_256(0.0)
    };
    
    var result0 = cross(v, c0);
    var result1 = cross(v, c1);
    var l0 = sqr_length(&result0);
    
    // if (sqr_length(&result) < 0.0001) {
    //     result = cross(v, c1);
    // }
    // return result;
    return result0;
}
let reflect = fun (v: v3_8x*; n: v3_8x*) => v3_8x {
    
    var len_b = SIMD::set1_ps_256(2.0) * dot(v, n);
    var b = scaled(n, len_b);
    return sub(v, &b);
}
let reflect = fun (v: v3_8x; n: v3_8x) => v3_8x {
    var len_b = SIMD::set1_ps_256(2.0) * dot(v, n);
    return sub(v, scaled(n, len_b));
}
let lerp = fun(a: v3_8x*; b: v3_8x*; t: f32_8x) => v3_8x {
    var delta = sub(b, a);
    var scaled_delta = scaled(&delta, t);
    var result = add(a, &scaled_delta);
    return result;
}
let lerp = fun(a: v3_8x; b: v3_8x; t: f32_8x) => v3_8x {
    var result = add(a, scaled(sub(b, a), t));
    return result;
}
let swap = fun (a: v3_8x*; b: v3_8x*) => void {
    var temp = *a;
    *a = *b;
    *b = temp;
}
let ray_4 = struct 
(
    origin: v3_8x;
    direction: v3_8x;
);
let at = fun(@ray: ray_4*; t: f32_8x) => v3_8x {
    var delta = scaled(&direction, t);
    return add(&origin, &delta);
}
let debug_print = fun(name: string; value: v3_8x) => void {
    print(name);
    print(": (");
    print(value.x);
    print(", ");
    print(value.y);
    print(", ");
    print(value.z);
    print(")\n");
}