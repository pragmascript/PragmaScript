import "preamble.prag"

["PACKED"]
let rgba_color = struct (
    r: i8;
    g: i8;
    b: i8;
    a: i8;
);
let bitmap = struct (
    width: i32;
    height: i32;
    pixels: i8*;
);

["PACKED"]
let bmp_file_header = struct(
	magic: i16;
	size: i32;
	reserverd: i32;
	offset: i32;
);

let load_bitmap = fun(file: string) => bitmap {
    var result = bitmap { };
    var bmp = read_file(file);
    var file_header = bmp.data@bmp_file_header*;
    assert(file_header.magic == 0x4D42);
    assert(file_header.size <= bmp.length);
    
    var bmp_info = (bmp.data + size_of(bmp_file_header))@Windows::BITMAPV4HEADER*;
    assert(bmp_info.biPlanes == 1);
    assert(bmp_info.biCompression == 0 || bmp_info.biCompression == 3);
    assert(bmp_info.biBitCount == 24 || bmp_info.biBitCount == 32);
    result.width = bmp_info.biWidth;
    result.height = bmp_info.biHeight;
    result.pixels = bmp.data + file_header.offset;
    assert(result.width > 0 && result.width < 4096);
    assert(result.height > 0 && result.height < 4096);
    
    return result;
}

let channel = fun(pixel: i32*; idx: i32) => i32 {
    var byte_ptr = pixel@i8*;
    assert(idx >= 0 && idx < 4);
    var result = (*(byte_ptr + idx))@\i32;
    return result;
}

let save_bitmap = fun(file: string; bmp: bitmap) => void {
    var header = bmp_file_header { };
    header.magic = 0x4D42;
    
    header.offset = size_of(bmp_file_header)@\i32 + size_of(Windows::BITMAPV4HEADER)@i32;
    header.size = header.offset + bmp.width * bmp.height * 4;
    header.reserverd = 0;
    var dib = Windows::BITMAPV4HEADER{ };
    dib.biSize = size_of(Windows::BITMAPV4HEADER)@i32;
    dib.biWidth = bmp.width;
    dib.biHeight = -bmp.height;
    dib.biPlanes = 1;
    dib.biCompression = 3;
    dib.biBitCount = 32;
    dib.biSizeImage = bmp.width * bmp.height * 4;
    dib.biRedMask = 0x00FF0000;
    dib.biGreenMask = 0x0000FF00;
    dib.biBlueMask = 0x000000FF;
    dib.biAlphaMask = 0xFF000000;
    dib.biCSType = 1934772034;
    
    var buffer = allocate(header.size@mm);
    var buf_ptr = buffer;
    
    *(buf_ptr@bmp_file_header*) = header;
    buf_ptr += size_of(bmp_file_header);
    *(buf_ptr@Windows::BITMAPV4HEADER*) = dib;
    buf_ptr += size_of(Windows::BITMAPV4HEADER);
    
    var src = bmp.pixels@i32*;
    var dst = buf_ptr@i32*;
    
    var width = bmp.width;
    var height = bmp.height;
    for (var j = 0; j < height; ++j) {
        for (var i = 0; i < width; ++i) {
            var r = channel(src, 0);
            var g = channel(src, 1);
            var b = channel(src, 2);
            var a = channel(src, 3);
            var dest_pixel = b + (g << 8) + (r << 16) + (a << 24);
            *dst++ = dest_pixel;
            src++;
        }
    }
    
    // memcpy(buf_ptr, bmp.pixels, (bmp.width * bmp.height * 4)@mm);
    write_file(file, buffer[:header.size]);
    free(buffer);
}
