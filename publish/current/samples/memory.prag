import "preamble.prag"

let memory_arena = struct(
	size: mm;
	base: ptr;
	used: mm;
);

let align_4 = fun(value: mm) => mm{
	return (value + 3) & (~3);
}
let align_8 = fun(value: mm) => mm {
	return (value + 7) & (~7);
}
let align_16 = fun(value: mm) => mm {
	return (value + 15) & (~15);
}

let push = fun(@arena: memory_arena*; push_size: mm) => ptr {
	var result = base + used;
	// result = align_16(result@mm)@ptr;

	used = result@mm - base@mm  + push_size@mm;
	
	if (used > size) {
		assert(false);
		return nullptr;
	}
	return result;
}

let create_arena = fun(size: mm) => memory_arena {
	var data = allocate(size);
	var result: memory_arena;
	if (data != nullptr) {
		result.size = size;
		result.base = data;
		result.used = 0;
	} else {
		result.size = 0;
		result.base = nullptr;
		result.used = 0;
	}
	return result;
}


