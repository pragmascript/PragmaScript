import "preamble.prag"

let memory_arena = struct(
	size: mm;
	base: ptr;
	used: mm;
);

let align_4 = fun(value: mm) => mm{
	return (value + 3) & (~3);
}
let align_8 = fun(value: mm) => mm {
	return (value + 7) & (~7);
}
let align_16 = fun(value: mm) => mm {
	return (value + 15) & (~15);
}

let push = fun(@arena: memory_arena*; push_size: mm) => ptr {
	var result = base + used;
	// result = align_16(result@mm)@ptr;

	used = result@mm - base@mm  + push_size@mm;
	
	if (used > size) {
		assert(false);
		return nullptr;
	}
	return result;
}

let start_temp = fun(@arena: memory_arena*;) => mm {
	return used;
}

let stop_temp = fun(@arena: memory_arena*; temp_used: mm) => void {
	used = temp_used;
}
mod _INTERNAL {
// TODO(pragma): this stuff should be thread local?
	var temp_memory_stack_pos: i32;
	var temp_memory_stack: mm[32];	
}


// TODO(pragma): make this threadsafe
let push_temp = fun(@arena: memory_arena* = &temp_memory_arena) => void {
	_INTERNAL::temp_memory_stack[_INTERNAL::temp_memory_stack_pos++] = start_temp(arena);
	if (_INTERNAL::temp_memory_stack_pos@mm >= len(_INTERNAL::temp_memory_stack)) {
		assert(false, "Exceeded max temp memory stack size!");
	}
}

// TODO(pragma): make this threadsafe
let pop_temp = fun(@arena: memory_arena* = &temp_memory_arena) => void {
	_INTERNAL::temp_memory_stack_pos--;
	if (_INTERNAL::temp_memory_stack_pos < 0) {
		assert(false, "Inbalanced push_temp pop_temp operations. Stack pos below 0!");
	}
	stop_temp(arena, _INTERNAL::temp_memory_stack[_INTERNAL::temp_memory_stack_pos]);
}

let create_arena = fun(size: mm) => memory_arena {
	var data = allocate(size);
	var result: memory_arena;
	if (data != nullptr) {
		result.size = size;
		result.base = data;
		result.used = 0;
	} else {
		result.size = 0;
		result.base = nullptr;
		result.used = 0;
	}
	return result;
}

let get_slice = fun(@arena: memory_arena*) => i8[] {
	var result = base[:used@i32];
	return result;
}
