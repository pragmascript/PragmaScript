import "preamble.prag"

// http://openlibm.org/
mod Math
{
	let pi: f64 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062;
	let half_pi = pi / 2.0;
	let pi_32 = pi@f32;
	let half_pi_32 = half_pi@f32;
	let tau = 2.0 * pi;
	let tau_32 = 2.0 * pi_32;

	["READNONE"]
	let sin     = extern("llvm.sin.f32")    fun (x: f32) => f32;
	["READNONE"]
	let cos     = extern("llvm.cos.f32")    fun (x: f32) => f32;
	["READNONE"]
	let tan     = extern("tanf")  		    fun (x: f32) => f32;
	["READNONE"]
	let asin    = extern("asinf")           fun (x: f32) => f32;
	["READNONE"]
	let acos    = extern("acosf")           fun (x: f32) => f32;
	["READNONE"]
	let atan    = extern("atanf")           fun (x: f32) => f32;
	["READNONE"]
	let atan2   = extern("atan2f")          fun (x: f32) => f32;
	["READNONE"]
	let sqrt    = extern("llvm.sqrt.f32")   fun (x: f32) => f32;
	["READNONE"]
	let pow     = extern("llvm.pow.f32")    fun (x: f32; p: f32) => f32;
	["READNONE"]
	let abs     = extern("llvm.fabs.f32")   fun (x: f32) => f32;
	["READNONE"]
	let floor   = extern("llvm.floor.f32")  fun (x: f32) => f32;
	["READNONE"]
	let trunc   = extern("llvm.trunc.f32")  fun (x: f32) => f32;
	["READNONE"]
	let ceil    = extern("llvm.ceil.f32")   fun (x: f32) => f32;
	["READNONE"]
	let round   = extern("llvm.round.f32")  fun (x: f32) => f32;
	["READNONE"]
	let exp     = extern("llvm.exp.f32")    fun (x: f32) => f32;
	["READNONE"]
	let exp2    = extern("llvm.exp2.f32")   fun (x: f32) => f32;
	["READNONE"]
	let log     = extern("llvm.log.f32")    fun (x: f32) => f32;
	["READNONE"]
	let log2    = extern("llvm.log2.f32")   fun (x: f32) => f32;
	["READNONE"]
	let log10   = extern("llvm.log10.f32")  fun (x: f32) => f32;

	// ["READNONE"]
	// let min     = extern("llvm.minnum.f32") fun (a: f32; b: f32) => f32;
	// ["READNONE"]
	// let max     = extern("llvm.maxnum.f32") fun (a: f32; b: f32) => f32;

	["READNONE"]
	let min = fun(a: f32; b: f32) => f32 {
		if (a < b) {
			return a;
		} else {
			return b;
		}
	}

	["READNONE"]
	let max = fun(a: f32; b: f32) => f32 {
		if (a > b) {
			return a; 
		} else {
			return b;
		}
	}
	
	["READNONE"]
	let max = fun(a: i32; b: i32) => i32 {
		if (a > b) {
			return a; 
		} else {
			return b;
		}
	}

	["READNONE"]
	let min = fun(a: i32; b: i32) => i32 {
		if (a < b) {
			return a;
		} else {
			return b;
		}
	}

	let swap = fun (a: f32*; b: f32*) => void {
		var temp = *a;
		*a = *b;
		*b = temp;
	}

	["READNONE"]
	let round_to_i32 = fun (x: f32) => i32 {
		return round(x)@i32;
	}
	["READNONE"]
	let remainder = fun(x: f32; y: f32) => f32
	{
		return x - floor(x / y) * y;
	}
	["READNONE"]
	let lerp = fun(a: f32; b: f32; t: f32) => f32
	{
		return a + (b-a)*t;
	}
	["READNONE"]
	let abs = fun (value: i32) => i32
	{
		if (value >= 0) {
			return value;
		} else {
			return -value;
		}
	}
	
	["READNONE"]
	let sign = fun (value: f32) => f32 {
		if (value > 0) {
			return 1.0;
		} elif (value < 0) {
			return -1.0;
		} else {
			return 0.0;
		}
	}
	
	["READNONE"]
	let clamp = fun 
	(
		value: i32;
		min: i32;
		max: i32
	) => i32 
	{
		assert(min <= max);
		var result = value;
		if (result < min) {
			result = min;
		} elif (result > max) {
			result = max;
		}
		return result;
	}

	["READNONE"]
	let clamp = fun (value: f32; min: f32; max: f32) => f32 
	{
		assert(min <= max);
		var result = value;
		if (result < min) {
			result = min;
		} elif (result > max) {
			result = max;
		}
		return result;
	}
}
