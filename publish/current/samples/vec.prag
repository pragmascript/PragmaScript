import "preamble.prag"
import "math.prag"

let v3 = struct 
(
    x: f32;
    y: f32;
    z: f32;
);
let v3 = fun (x: f32; y: f32; z: f32) => v3 {
    var result = v3 { x, y, z};
    return result;
}
var vz = v3 {0.0, 0.0, 0.0};
let add = fun (a: v3*; b: v3*) => v3 {
    var result = v3 { a.x + b.x, a.y + b.y, a.z + b.z};
    return result;
}
let add = fun (a: v3; b: v3) => v3 {
    var result = v3 { a.x + b.x, a.y + b.y, a.z + b.z};
    return result;
}
let sub = fun (a: v3*; b: v3*) => v3 {
    var result = v3 { a.x - b.x, a.y - b.y, a.z - b.z};
    return result;
}
let sub = fun (a: v3; b: v3) => v3 {
    var result = v3 { a.x - b.x, a.y - b.y, a.z - b.z};
    return result;
}
let scaled = fun (a: v3*; s: f32) => v3 {
    var result = v3 { a.x * s, a.y * s, a.z * s};
    return result;
}
let scaled = fun (a: v3; s: f32) => v3 {
    var result = v3 { a.x * s, a.y * s, a.z * s};
    return result;
}
let hadamard = fun (a: v3*; b: v3*) => v3 {
    var result = v3 { a.x * b.x, a.y * b.y, a.z * b.z};
    return result;
}
let hadamard = fun (a: v3; b: v3) => v3 {
    var result = v3 { a.x * b.x, a.y * b.y, a.z * b.z};
    return result;
}
let normalize = fun (@a: v3*) => void {
    var scl = 1.0 / Math::sqrt(x*x + y*y + z*z);
    x *= scl;
    y *= scl;
    z *= scl;
}
let normalized = fun (v: v3*) => v3 {
    var result = *v;
    normalize(&result);
    return result;
}
let normalized = fun (v: v3) => v3 {
    var result = v;
    normalize(&result);
    return result;
}
let length = fun(@a: v3*) => f32 {
    return Math::sqrt(x*x + y*y + z*z);
}
let length = fun(@a: v3) => f32 {
    return Math::sqrt(x*x + y*y + z*z);
}
let sqr_length = fun(@a: v3*) => f32 {
    var result = x*x + y*y + z*z;
    return result;
}
let sqr_length = fun(@a: v3) => f32 {
    var result = x*x + y*y + z*z;
    return result;
}
let dot = fun (a: v3*; b: v3*) => f32 {
    var result = a.x*b.x + a.y*b.y + a.z*b.z;
    return result;
}
let dot = fun (a: v3; b: v3) => f32 {
    var result = a.x*b.x + a.y*b.y + a.z*b.z;
    return result;
}
let cross = fun (a: v3*; b: v3*) => v3 {
    var result = v3 
    { 
        a.y * b.z - a.z * b.y, 
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    };
    return result;
}
let cross = fun (a: v3; b: v3) => v3 {
    var result = v3 
    { 
        a.y * b.z - a.z * b.y, 
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    };
    return result;
}
let get_orthogonal = fun (v: v3*) => v3 {
    var c0 = v3 {1.0, 0.0, 0.0};
    var c1 = v3 {0.0, 1.0, 0.0};
    var result = cross(v, &c0);
    if (sqr_length(&result) < 0.0001) {
        result = cross(v, &c1);
    }
    return result;
}
let get_orthogonal = fun (v: v3) => v3 {
    var c0 = v3 {1.0, 0.0, 0.0};
    var c1 = v3 {0.0, 1.0, 0.0};
    var result = cross(v, c0);
    if (sqr_length(&result) < 0.0001) {
        result = cross(v, c1);
    }
    return result;
}
let reflect = fun (v: v3*; n: v3*) => v3 {
    var len_b = 2*dot(v, n);
    var b = scaled(n, len_b);
    return sub(v, &b);
}
let reflect = fun (v: v3; n: v3) => v3 {
    var len_b = 2*dot(v, n);
    return sub(v, scaled(n, len_b));
}
let lerp = fun(a: v3*; b: v3*; t: f32) => v3 {
    var delta = sub(b, a);
    var scaled_delta = scaled(&delta, t);
    var result = add(a, &scaled_delta);
    return result;
}
let lerp = fun(a: v3; b: v3; t: f32) => v3 {
    var result = add(a, scaled(sub(b, a), t));
    return result;
}
let Ray = struct 
(
    origin: v3;
    direction: v3;
);
let At = fun(@ray: Ray*; t: f32) => v3{
    var delta = scaled(&direction, t);
    return add(&origin, &delta);
}
let debug_print = fun(name: string; value: v3) => void {
    print(name);
    print(": (");
    print(value.x);
    print(", ");
    print(value.y);
    print(", ");
    print(value.z);
    print(")\n");
}