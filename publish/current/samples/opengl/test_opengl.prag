import "..\preamble.prag"
import "..\windows.prag"
import "..\math.prag"
import "..\vec.prag"
import "opengl.prag"

with Windows;

// https://hero.handmade.network/forums/code-discussion/t/129-howto_-_building_without_import_libraries

let window_state = struct 
(
    handle: mm;
    dc: mm;
    client_width: i32;
    client_height: i32;
    wants_to_quit: bool;
);
var window: window_state;
let get_perf_counter = fun() => i64 {
    var result: i64;
    QueryPerformanceCounter(&result);
    return result;
}
var perf_count_freq: i64;
let get_seconds_elapsed = fun(t0: i64; t1: i64) => f64 {
    return (t1 - t0)@f64 / perf_count_freq@f64;
}
let get_ms_elapsed = fun(t0: i64; t1: i64) => f64 {
    return get_seconds_elapsed(t0, t1) * 1000;
}

let write_file = fun (name: string; buffer: string) => bool
{
    var handle = CreateFileA(cstr(name), GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, 0, 0);
    if (handle == null) {
        CloseHandle(handle);
        return false;
    }
    var bytes_written: i32 = 0;
    var result = WriteFile(handle, buffer.data, buffer.length, &bytes_written, nullptr);
    if (result != 0) {
        CloseHandle(handle);
        assert(buffer.length == bytes_written);
        return true;
    } else {
        CloseHandle(handle);
        return false;
    }

    CloseHandle(handle);
    return false;
}

let read_file = fun (name: string) => string  
{
    var result: string;
    result.data = nullptr;
    result.length = 0;
    var handle = CreateFileA(cstr(name), GENERIC_READ, FILE_SHARE_READ, nullptr, OPEN_EXISTING, 0, 0);
    if (handle == null) {
        return result;
    }

    var size: i64 = 0;
    var fsr = GetFileSizeEx(handle, &size);
    if (fsr == 0 || size == 0) {
        CloseHandle(handle);
        return result;
    }

    var buffer = VirtualAlloc(nullptr, size@mm, MEM_COMMIT, PAGE_READWRITE);
    if (buffer@mm == null) {
        CloseHandle(handle);
        return result;
    }
    assert(size@mm <=\ gigabytes(4));
    var size_32 = size@i32;
    var bytes_read: i32;
    var rfr = ReadFile(handle, buffer, size_32, &bytes_read,  nullptr);
    assert(bytes_read == size_32);
    if (rfr == 0) {
        VirtualFree(buffer, null, MEM_RELEASE);
        CloseHandle(handle);
        return result;		
    }

    result.data = buffer;
    result.length = size_32;
    CloseHandle(handle);
    return result;
} 

let render_opengl = fun (@window_state: window_state*; time: f32) => void {
    if (!gl_resources_initialized) {
        init_gl_resources();
    }
    glViewport(0, 0, client_width, client_height);
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);

    // glDrawArrays(GL_TRIANGLES, 0, 3);
    // glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr);
    glDrawElements(GL_TRIANGLES, current_mesh.indices.length, GL_UNSIGNED_INT, nullptr);
    // https://hero.handmade.network/episode/code/day368

    SwapBuffers(dc);
}

let mesh = struct (
    vertices: v3[];
    indices: i32[];
);


var current_mesh = mesh {};
let create_circle = fun(center: v3; radius: f32; segments: i32 = 96) => mesh {
    var c = center;
    var result = mesh {};
    var size_vertices = (segments + 1) * size_of(v3)@i32;
    var size_indices = 3 * segments * size_of(i32)@i32;
    var total_size = size_vertices + size_indices;
    var memory = Windows::VirtualAlloc(nullptr, total_size@\mm, MEM_COMMIT, PAGE_READWRITE);

    var vp = memory@v3*;
    result.vertices = vp[:segments+1];
    // result.vertex_count = segments + 1;

    var aspect = window.client_width@f32 / window.client_height@f32;

    *vp++ = center;
    for (var i = 0; i < segments; ++i) {
        var v = v3{};
        var phi = Math::tau_32 * i@f32 / segments@f32;
        v.x = radius * Math::cos(phi);
        v.y = aspect * radius * Math::sin(phi);
        v = add(&v, &c);
        *vp++ = v;
    }
    var ip = (memory + size_vertices)@i32*;
    result.indices = ip[:(result.vertices.length - 1) * 3];
    
    for (var i = 1; i <= segments; ++i) {
        *ip++ = 0;
        *ip++ = i;
        var next_idx = i + 1;
        if (next_idx > segments) {
            assert(next_idx == segments + 1);
            next_idx = 1;
        }
        *ip++ = next_idx;
    }
    return result;
}

var gl_resources_initialized = false;
let init_gl_resources = fun() => void {
    // make a dummy VAO
    // https://developer.nvidia.com/sites/default/files/akamai/gamedev/docs/Porting%20Source%20to%20Linux.pdf
    var DummyVAO: i32;
    glGenVertexArrays(1, &DummyVAO);
    glBindVertexArray(DummyVAO);

    var vs_source = read_file("..\\vs.glsl\0");
    assert(vs_source.data != nullptr);
    var vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vs_source.data, 0@i32*);
    glCompileShader(vertexShader);
    {
        var success: i32;
        var infoLog: i8[512];
        glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
        if (success == 0) {
            glGetShaderInfoLog(vertexShader, len(infoLog)@\i32, 0@i32*, &infoLog);
            debug_print_string("vs.glsl", from_cstr(&infoLog[0]));
        }
    }
    
    var fs_source = read_file("..\\fs.glsl\0");
    assert(fs_source.data != nullptr);
    var fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fs_source.data, 0@i32*);
    glCompileShader(fragmentShader);
    {
        var success: i32;
        var infoLog: i8[512];
        glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
        if (success == 0) {
            glGetShaderInfoLog(fragmentShader, len(infoLog)@\i32, 0@i32*, &infoLog);
            debug_print_string("fs.glsl", from_cstr(&infoLog[0]));
        }
    }

    var shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    {
        var success: i32;
        var infoLog: i8[512];
        glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
        if (success == 0) {
            glGetProgramInfoLog(shaderProgram, len(infoLog)@\i32, 0@i32*, &infoLog);
            debug_print_string("program", from_cstr(&infoLog[0]));
        }
    }
    
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    // var vertices = [
    //      0.5,  0.5, 0.0,
    //      0.5, -0.5, 0.0,
    //     -0.5, -0.5, 0.0,
    //     -0.5,  0.5, 0.0
    // ];
    // var vertices_size = len(vertices) * size_of(f32);
    // var indices = [
    //     0, 1, 3,
    //     1, 2, 3
    // ];
    // var indices_size = len(indices) * size_of(i32);

    var mesh = create_circle(vz, 0.3);
    var vertices_size = @mm mesh.vertices.length * size_of(v3);
    var indices_size = @mm mesh.indices.length * size_of(i32);
    current_mesh = mesh;

    var VBO: i32;
    glGenBuffers(1, &VBO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, vertices_size, mesh.vertices.data@ptr, GL_STATIC_DRAW);
    // glBufferData(GL_ARRAY_BUFFER, vertices_size, &vertices@ptr, GL_STATIC_DRAW);

    var EBO: i32;
    glGenBuffers(1, &EBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices_size, mesh.indices.data@ptr, GL_STATIC_DRAW);
    // glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices_size, &indices@ptr, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * size_of(f32)@\i32, nullptr);
    glEnableVertexAttribArray(0);

    glUseProgram(shaderProgram);

    gl_resources_initialized = true;
}

let process_pending_messages = fun() => void {
    var msg: MSG;
    while (PeekMessageA(&msg, null, 0, 0, PM_REMOVE|PM_NOYIELD) != 0) {
        var message = msg.message;
        if (message == WM_QUIT) {
            window.wants_to_quit = true;
        } 
        elif (message == WM_SYSKEYDOWN
            || message == WM_SYSKEYUP
            || message == WM_KEYDOWN
            || message == WM_KEYUP) {

            var w_param = @i32 (msg.wParam >> 32@mm);
            var l_param = @i32 (msg.lParam >> 32@mm);
            var vk_code = w_param;

            var was_down = (l_param & (1 << 30)) != 0;
            var is_down = (l_param & (1 << 31)) == 0;
            var key_up = was_down && !is_down;
            var key_down = !was_down && is_down; 

            if(vk_code == VK_ESCAPE) {
                window.wants_to_quit = true;
            }
        } else {
            TranslateMessage(&msg);
            DispatchMessageA(&msg);
        }
    }
}

let PROCESS_SYSTEM_DPI_AWARE = 1;
let SetProcessDpiAwareness = extern fun(
    value: i32;
) => i32;

let main_window_callback = fun
(
    window_handle: mm;
    message: i32;
    w_param: mm;
    l_param: mm;
) => mm {
    var result = null;
    if (message == WM_SIZE || message == WM_SIZING) {
    }
    elif (message == WM_CLOSE) {
        window.wants_to_quit = true;
    }
    elif (message == WM_DESTROY) {
        window.wants_to_quit = true;
    }
    elif (message == WM_PAINT) {
        var paint: PAINTSTRUCT;
        var context = BeginPaint(window_handle, &paint);
        // blit_to_screen(window.dc, &window.backbuffer);
        EndPaint(window_handle, &paint);
    } 
    else {
        result = DefWindowProcA(window_handle, message, w_param, l_param);
    }
    return result;
}

let load_wgl_extensions = fun() => void {
    var window_class = WNDCLASSEX {};
    var class_name = cstr("wgl_extension_dummy_window\0");
    var window_name = cstr("dummy window\0");

    window_class.cbSize = size_of(WNDCLASSEX)@i32;
    window_class.hInstance = GetModuleHandleA(0);
    window_class.lpszClassName = class_name;
    window_class.lpfnWndProc = @ptr DefWindowProcA;
    RegisterClassExA(&window_class);
    var dummy_wnd = CreateWindowExA(
        0,
        window_class.lpszClassName,
        window_name,
        0,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        null,
        null,
        window_class.hInstance,
        null
    );
    
    var dummy_dc = GetDC(dummy_wnd);
    assert(dummy_dc != null);

    var pfd = PIXELFORMATDESCRIPTOR { };
    pfd.nSize = size_of(PIXELFORMATDESCRIPTOR)@i16;
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_SUPPORT_OPENGL|PFD_DRAW_TO_WINDOW|PFD_DOUBLEBUFFER;
    pfd.cColorBits = 32;
    pfd.cAlphaBits = 8;
    
    var t0 = get_perf_counter();
    var pfd_idx = ChoosePixelFormat(dummy_dc, &pfd);
    var suggested_pfd: PIXELFORMATDESCRIPTOR;
    DescribePixelFormat(dummy_dc, pfd_idx, size_of(PIXELFORMATDESCRIPTOR)@i32, &suggested_pfd);
    SetPixelFormat(dummy_dc, pfd_idx, &suggested_pfd);
    var t1 = get_perf_counter();

    var gl_rc = wglCreateContext(dummy_dc);
    var success = wglMakeCurrent(dummy_dc, gl_rc);
    assert(success != 0);

    *(&wglChoosePixelFormatARB@ptr*) = wglGetProcAddress(cstr("wglChoosePixelFormatARB\0"));
    assert(wglChoosePixelFormatARB@ptr != nullptr);

    *(&wglCreateContextAttribsARB@ptr*) = wglGetProcAddress(cstr("wglCreateContextAttribsARB\0"));
    assert(wglCreateContextAttribsARB@ptr != nullptr);

    *(&wglSwapIntervalEXT@ptr*) = wglGetProcAddress(cstr("wglSwapIntervalEXT\0"));
    assert(wglSwapIntervalEXT@ptr != nullptr);

    *(&wglGetExtensionsStringEXT@ptr*) = wglGetProcAddress(cstr("wglGetExtensionsStringEXT\0"));
    assert(wglGetExtensionsStringEXT@ptr != nullptr);

    wglMakeCurrent(0, 0);
    wglDeleteContext(gl_rc);
    ReleaseDC(dummy_wnd, dummy_dc);
    DestroyWindow(dummy_wnd);

    // debug_print_string("wgl extensions", from_cstr(wglGetExtensionsStringEXT()));
    debug_print_f64("choose pixel format: ", get_ms_elapsed(t0, t1));
}

let opengl_info = struct (
    shading_language_version: string;
    vendor: string;
    renderer: string;
    version: string;
    extensions: string;
);


let print_opengl_info = fun(@info: opengl_info*) => void {
    print_string("OPENGL INFO:\n");
    debug_print_string("shading language verison", shading_language_version);
    debug_print_string("vendor", vendor);
    debug_print_string("renderer", renderer);
    debug_print_string("version", version);
    debug_print_string("extensions", extensions);
    print_string("\n");
}

let get_opengl_info = fun() => opengl_info {
    var result: opengl_info;
    
    result.shading_language_version = from_cstr(glGetString(GL_SHADING_LANGUAGE_VERSION), -1);
    result.vendor = from_cstr(glGetString(GL_VENDOR), -1);
    result.renderer = from_cstr(glGetString(GL_RENDERER), -1);
    result.version = from_cstr(glGetString(GL_VERSION), -1);
    
    // TODO(pragma): GL_EXTENSIONS is deprecated use
    //   glGetStringi with GL_EXTENSIONS, i and
    //   GL_NUM_EXTENSIONS
    // result.extensions = from_cstr(glGetString(GL_EXTENSIONS), -1);
    // print_opengl_info(&result);
    return result;
}


// http://mariuszbartosik.com/opengl-4-x-initialization-in-windows-without-a-framework/
let init_opengl = fun (window: window_state*) => void {
    load_wgl_extensions();

    var dc = window.dc;

    var t0 = get_perf_counter();
    var int_attrib_list = [
        WGL_DRAW_TO_WINDOW_ARB, GL_TRUE,
        WGL_ACCELERATION_ARB, WGL_FULL_ACCELERATION_ARB,
        WGL_DOUBLE_BUFFER_ARB, GL_TRUE,
        WGL_PIXEL_TYPE_ARB, WGL_TYPE_RGBA_ARB,
        WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB, GL_TRUE,
        0
    ];

    var suggested_pixel_format_index = 0;
    var extended_pick = 0;
    wglChoosePixelFormatARB(dc, &int_attrib_list[0], 0@f32*, 1, 
        &suggested_pixel_format_index, &extended_pick);

    // debug_print_i32("suggested_pixel_format_index", suggested_pixel_format_index);
    // debug_print_i32("extended_pick", extended_pick);
    assert(extended_pick == 1);

    var pfd: PIXELFORMATDESCRIPTOR;
    DescribePixelFormat(dc, suggested_pixel_format_index, @i32(size_of(PIXELFORMATDESCRIPTOR)), &pfd);
    SetPixelFormat(dc, suggested_pixel_format_index, &pfd);
    
    var t1 = get_perf_counter();

    var opengl_attribs = [
        WGL_CONTEXT_MAJOR_VERSION_ARB, 4,
        WGL_CONTEXT_MINOR_VERSION_ARB, 5,
        WGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_DEBUG_BIT_ARB,
        WGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,
        0
    ];

    var gl_rc = wglCreateContextAttribsARB(dc, null, &opengl_attribs[0]);
    var result = wglMakeCurrent(dc, gl_rc);
    assert(result != 0);

    wglSwapIntervalEXT(1);
    
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB);

    *(&glDebugMessageCallback@ptr*) = wglGetProcAddress(cstr("glDebugMessageCallback\0"));
    assert(glDebugMessageCallback@ptr != nullptr);
    glDebugMessageCallback(@glDebugMessageCallbackType gl_error_callback, nullptr);

    
    *(&glGenBuffers@ptr*) = wglGetProcAddress(cstr("glGenBuffers\0"));
    assert(glGenBuffers@ptr != nullptr);

    *(&glBindBuffer@ptr*) = wglGetProcAddress(cstr("glBindBuffer\0"));
    assert(glBindBuffer@ptr != nullptr);

    *(&glBufferData@ptr*) = wglGetProcAddress(cstr("glBufferData\0"));
    assert(glBufferData@ptr != nullptr);

    *(&glEnableVertexAttribArray@ptr*) = wglGetProcAddress(cstr("glEnableVertexAttribArray\0"));
    assert(glEnableVertexAttribArray@ptr != nullptr);

    *(&glDisableVertexAttribArray@ptr*) = wglGetProcAddress(cstr("glDisableVertexAttribArray\0"));
    assert(glDisableVertexAttribArray@ptr != nullptr);

    *(&glVertexAttribPointer@ptr*) = wglGetProcAddress(cstr("glVertexAttribPointer\0"));
    assert(glVertexAttribPointer@ptr != nullptr);

    *(&glCreateShader@ptr*) = wglGetProcAddress(cstr("glCreateShader\0"));
    assert(glCreateShader@ptr != nullptr);

    *(&glShaderSource@ptr*) = wglGetProcAddress(cstr("glShaderSource\0"));
    assert(glShaderSource@ptr != nullptr);

    *(&glCompileShader@ptr*) = wglGetProcAddress(cstr("glCompileShader\0"));
    assert(glCompileShader@ptr != nullptr);
    
    *(&glDeleteShader@ptr*) = wglGetProcAddress(cstr("glDeleteShader\0"));
    assert(glDeleteShader@ptr != nullptr);

    *(&glCreateProgram@ptr*) = wglGetProcAddress(cstr("glCreateProgram\0"));
    assert(glCreateProgram@ptr != nullptr);

    *(&glAttachShader@ptr*) = wglGetProcAddress(cstr("glAttachShader\0"));
    assert(glAttachShader@ptr != nullptr);

    *(&glLinkProgram@ptr*) = wglGetProcAddress(cstr("glLinkProgram\0"));
    assert(glLinkProgram@ptr != nullptr);

    *(&glUseProgram@ptr*) = wglGetProcAddress(cstr("glUseProgram\0"));
    assert(glUseProgram@ptr != nullptr);

    *(&glDeleteProgram@ptr*) = wglGetProcAddress(cstr("glDeleteProgram\0"));
    assert(glDeleteProgram@ptr != nullptr);

    *(&glGetShaderiv@ptr*) = wglGetProcAddress(cstr("glGetShaderiv\0"));
    assert(glGetShaderiv@ptr != nullptr);

    *(&glGetProgramiv@ptr*) = wglGetProcAddress(cstr("glGetProgramiv\0"));
    assert(glGetProgramiv@ptr != nullptr);

    *(&glGetShaderInfoLog@ptr*) = wglGetProcAddress(cstr("glGetShaderInfoLog\0"));
    assert(glGetShaderInfoLog@ptr != nullptr);

    *(&glGetProgramInfoLog@ptr*) = wglGetProcAddress(cstr("glGetProgramInfoLog\0"));
    assert(glGetProgramInfoLog@ptr != nullptr);

    *(&glGenVertexArrays@ptr*) = wglGetProcAddress(cstr("glGenVertexArrays\0"));
    assert(glGenVertexArrays@ptr != nullptr);

    *(&glBindVertexArray@ptr*) = wglGetProcAddress(cstr("glBindVertexArray\0"));
    assert(glBindVertexArray@ptr != nullptr);

    *(&glDrawArrays@ptr*) = wglGetProcAddress(cstr("glDrawArrays\0"));
    assert(glDrawArrays@ptr != nullptr);

    *(&glDrawElements@ptr*) = wglGetProcAddress(cstr("glDrawElements\0"));
    assert(glDrawElements@ptr != nullptr);

    var t2 = get_perf_counter();
    var info = get_opengl_info();
    var t3 = get_perf_counter();

    // debug_print_f64("choose pixel format: ", get_ms_elapsed(t0, t1));
    // debug_print_f64("create context: ", get_ms_elapsed(t1, t2));
    // debug_print_f64("get info: ", get_ms_elapsed(t2, t3));
}

let gl_error_callback = fun(
    source: i32;
    type: i32;
    id: i32;
    severity: i32;
    length: i32;
    message: ptr;
    userParam: ptr;
) => void {
    print_string("\n(gl) ");
    if (type == GL_DEBUG_TYPE_ERROR) {
        print_string("error");
    } elif (type == GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR) {
        print_string("deprecated");
    } elif (type == GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR) {
        print_string("undefined");
    } elif (type == GL_DEBUG_TYPE_PORTABILITY) {
        print_string("portability");
    } elif (type == GL_DEBUG_TYPE_PERFORMANCE) {
        print_string("performance");
    } elif (type == GL_DEBUG_TYPE_OTHER) {
        print_string("other");
    } elif (type == GL_DEBUG_TYPE_MARKER) {
        print_string("marker");
    } elif (type == GL_DEBUG_TYPE_PUSH_GROUP) {
        print_string("push");
    } elif (type == GL_DEBUG_TYPE_POP_GROUP) {
        print_string("pop");
    } 
    if (severity == GL_DEBUG_SEVERITY_NOTIFICATION) {
        print_string("(note): ");
    } elif (severity == GL_DEBUG_SEVERITY_LOW) {
        print_string("(low): ");
    } elif (severity == GL_DEBUG_SEVERITY_MEDIUM) {
        print_string("(medium): ");
    } elif (severity == GL_DEBUG_SEVERITY_HIGH) {
        print_string("(high): ");
    }
    print_string(from_cstr(message));
    print_string("\n");

    if (type == GL_DEBUG_TYPE_ERROR) {
        assert(false);
    }
}

[
	"compile.output": "opengl_test.exe",
	"compile.entry" : "true",
 	"compile.opt"   : "3",
    "compile.debuginfo": "true",
    "compile.ll"    : "false",
    "compile.asm"   : "false",
    "compile.cpu"   : "nehalem",
 	"compile.run"   : "true",
 	"compile.libs"  : "kernel32.lib, user32.lib, gdi32.lib, shcore.lib, libopenlibm.a, opengl32.lib",
	"compile.path"  : "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.14393.0\um\x64, lib"
]
let main = fun() => void {
    QueryPerformanceFrequency(&perf_count_freq);
#if TRUE
    SetProcessDpiAwareness(PROCESS_SYSTEM_DPI_AWARE);
#endif

    var t0 = get_perf_counter();
    
    let buffer_width  = 1280;
    let buffer_height = 720;

    var client_rect = RECT { 0, 0, buffer_width, buffer_height };
    AdjustWindowRectEx(&client_rect, dw_style, 0, dw_ex_style);

    var window_width = client_rect.right - client_rect.left;
    assert(window_width > 0);
    var window_height = client_rect.bottom - client_rect.top;
    assert(window_height > 0);
    window.client_width = buffer_width;
    window.client_height = buffer_height;
    
    var class_name  = cstr("opengl_test_window_class\0");
    var window_name = cstr("opengl test\0");
    var module_handle = GetModuleHandleA(null);
    var window_class = WNDCLASSEX {};
    window_class.cbSize = size_of(WNDCLASSEX)@i32;
    window_class.style = CS_HREDRAW|CS_VREDRAW;
    window_class.lpfnWndProc = @ptr main_window_callback;
    window_class.hInstance = module_handle;
    window_class.lpszClassName = class_name;
    window_class.hCursor = LoadCursorA(null, IDC_ARROW);
    RegisterClassExA(&window_class);
    
    let dw_style = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_VISIBLE;
    let dw_ex_style = 0&WS_EX_TOPMOST;
 
    window.handle = CreateWindowExA(
        dw_ex_style,
        class_name,
        window_name,
        dw_style,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        window_width,
        window_height,
        null,
        null,
        module_handle,
        null
    );
    window.dc = GetDC(window.handle);

    var gl_t0 = get_perf_counter();
    init_opengl(&window);
    var gl_t1 = get_perf_counter();

    // debug_print_f64("init opengl time: ", get_seconds_elapsed(gl_t0, gl_t1));
    var frames = 0;

    var start_time = get_perf_counter();
    while (!window.wants_to_quit) {
        process_pending_messages();
        var t0 = get_perf_counter();
        var time = get_seconds_elapsed(start_time, t0);
        render_opengl(&window, @f32 time);
        var t1 = get_perf_counter();
        frames++;
        if (frames == 60) {
            debug_print_f64("ms elapsed: ", get_seconds_elapsed(t0, t1) * 1000.0);
            frames = 0;
        }
    }
    ExitProcess(0);
}
