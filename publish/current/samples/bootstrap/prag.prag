import "../preamble.prag"
import "../memory.prag"


let compile_error = fun(s: string; filepos: string = __file_pos__()) => void {
    print(concat("Compiler error: ", concat(s, "\n")));
    
    assert(false, s, filepos);
}

// let push = fun::T(buf: T[]*; val: T) => void {
let buf_push = fun(buf: string[]*; val: string) => void {
    if (buf.capacity <= buf.length) {
        var old_data = buf.data;
        
        var new_capacity: i32;
        if (buf.capacity == 0) {
            new_capacity = 1024;
        } else {
            assert(buf.capacity <= MAX_SIGNED_I32 / 2);
            new_capacity = buf.capacity * 2;    
        }
        
        buf.capacity = new_capacity;
        buf.data = allocate(size_of(string) * (buf.capacity * 2)@mm)@string*;
        memcpy(buf.data@ptr, old_data@ptr, @mm buf.length * size_of(string));
    }
    assert(buf.length + 1 < buf.capacity);
    buf.data[buf.length++] = val;
}

let buf_free = fun(buf: i32[]*) => void {
    free(buf.data@ptr);
    buf.capacity = 0;
    buf.length = 0;
}

let debug_print = fun(name: string; value: string[]) => void {
    print(name);
    print(": [");
    for (var idx = 0; idx < value.length; ++idx) {
        print("\"");
        print(value[idx]);
        print("\"");
        if (idx != value.length - 1) {
            print(", ");
        }
    }
    print("]\n");
}


let token_kind = enum(
    eof = 0;
    int_literal = 128;
    float_literal;
    identifier;
);

let token = struct (
    kind: token_kind;
    int_value: i64;
    float_value: f64;
    text: string;
    name: string;
);
var token: token;
var stream: i8*;

var keyword_if: string;
var keyword_for: string;
var keyword_while: string;

let init_keywords = fun() => void {
    keyword_if = str_intern("if");
    keyword_for = str_intern("for");
    keyword_while = str_intern("while");
}
var char_to_digit_plus_one: i8[256];
let init_lex = fun() => void {
    init_keywords();
    char_to_digit_plus_one[ord("0")@i32] = 1;
    char_to_digit_plus_one[ord("1")@i32] = 2;
    char_to_digit_plus_one[ord("2")@i32] = 3;
    char_to_digit_plus_one[ord("3")@i32] = 4;
    char_to_digit_plus_one[ord("4")@i32] = 5;
    char_to_digit_plus_one[ord("5")@i32] = 6;
    char_to_digit_plus_one[ord("6")@i32] = 7;
    char_to_digit_plus_one[ord("7")@i32] = 8;
    char_to_digit_plus_one[ord("8")@i32] = 9;
    char_to_digit_plus_one[ord("9")@i32] = 10;
    char_to_digit_plus_one[ord("a")@i32] = 11;
    char_to_digit_plus_one[ord("A")@i32] = 11;
    char_to_digit_plus_one[ord("b")@i32] = 12;
    char_to_digit_plus_one[ord("B")@i32] = 12;
    char_to_digit_plus_one[ord("c")@i32] = 13;
    char_to_digit_plus_one[ord("C")@i32] = 13;
    char_to_digit_plus_one[ord("d")@i32] = 14;
    char_to_digit_plus_one[ord("D")@i32] = 14;
    char_to_digit_plus_one[ord("e")@i32] = 15;
    char_to_digit_plus_one[ord("E")@i32] = 15;
    char_to_digit_plus_one[ord("f")@i32] = 16;
    char_to_digit_plus_one[ord("F")@i32] = 16;
}

let scan_int_literal = fun(allow_hex: bool = true) => i64 {
    var base: i64 = 10;
    var val: i64 = 0;
    if (*stream == ord("0") && allow_hex) {
        stream++;
        if (*stream == ord("x") || *stream == ord("X")) {
            base = 16;
            stream++;
        } else {
            compile_error("Invalid integer literal suffix");
        }
    }
    for (;;) {
        var digit_plus_one = char_to_digit_plus_one[(*stream)@i32]@i64;
        if (digit_plus_one == 0 && digit_plus_one <= base)
        {
            break;
        }
        var digit = digit_plus_one - 1;
        if (val >\ (MAX_UNSIGNED_I64 - digit) /\ 10) {
            compile_error("integer literal overflow");
        }
        val = val * base + digit;
        stream++;
    }
    return val;
}



let scan_float_literal = fun() => f64 {
    var a = scan_int_literal(false);
    assert(*stream == ord("."));
    stream++;
    var temp = stream;
    var b = scan_int_literal(false);
    var places = (stream - temp)@\i32;
    var result: f64;
    var divisor: f64 = 1;
    for (var i = 0; i < places; ++i) {
        divisor *= 10.0;
    }
    if (places > 0) {
        result = a@f64 + (b@f64 / divisor);
    } else {
        result = a@f64;
    }
    return result;
}

let next_token = fun() => void {
    while (is_whitespace(*stream)) {
        stream++;
    }
    token.text.data = stream;
    var current = *stream;
    if (is_digit(current)) {
        var temp = stream;
        while (is_digit(*stream)) { 
            stream++;
        }
        if (*stream == ord(".")) {
            stream = temp;
            token.kind = token_kind::float_literal;
            token.float_value = scan_float_literal();
        } else {
            stream = temp;
            token.kind = token_kind::int_literal;
            token.int_value = scan_int_literal();
        }
    }
    elif (is_identifier_start_char(current)) {
        var name: string;
        name.data = stream;
        name.length = 0;
        while (is_identifier_char(*stream)) {
            name.length++;
            stream++;
        }
        token.name = str_intern(name);
        token.kind = token_kind::identifier;
    }
    else {
        token.kind = *stream@token_kind;
        stream++;
    }
    token.text.length = (stream - token.text.data)@i32;
}

let tk = fun(k: string) => token_kind {
    assert(k.length == 1);
    return k[0]@token_kind;
}
let is_token = fun(kind: token_kind) => bool {
    return token.kind == kind;
}
let is_token = fun(kind: string) => bool {
    return is_token(tk(kind));
}
let is_token_identifier = fun(name: string) => bool {
    return token.kind == token_kind::identifier && token.name.data == name.data;
}
let match_token = fun(kind: token_kind) => bool {
    if (is_token(kind)) {
        next_token();
        return true;
    } else {
        return false;
    }
}
let match_token = fun(kind: string) => bool {
    return match_token(tk(kind));
}

let expect_token = fun(kind: token_kind) => bool {
    if (is_token(kind)) {
        next_token();
        return true;
    } else {
        var str = "expected token: ";
        str = concat(str, friendly_name(kind));
        str = concat(str, ", got: ");
        str = concat(str, friendly_name(token.kind));
        fatal(str);
        return false;
    }
}
let expect_token = fun(kind: string) => bool {
    return expect_token(tk(kind));
}

let fatal = fun(msg: string) => void {
    assert(false, msg);
}

let friendly_name = fun(kind: token_kind) => string {
    if (kind == token_kind::eof) {
        return clone_string("eof");
    }
    elif (kind@i32 < 128) {
        var result = make_string(3);
        result[0] = ord("\"");
        result[1] = kind@i8;
        result[2] = ord("\"");
        return result;
    }
    elif (kind == token_kind::int_literal) {
        return clone_string("int_literal");
    }
    elif (kind == token_kind::identifier) {
        return clone_string("identifier");
    }
    else {
        return string { };
    }
}

let init_stream = fun(s: string) => void {
    stream = &s[0];
    next_token();
}

let assert_token = fun(s: string; filepos: string = __file_pos__()) => void {
    assert(match_token(s), "", filepos);
}
let assert_token_ident = fun(name: string; filepos: string = __file_pos__()) => void {
    var s = str_intern(name);
    assert(token.name.data == s.data && match_token(token_kind::identifier), "", filepos);
}
let assert_token_int = fun(value: i64; filepos: string = __file_pos__()) => void {
    assert(token.int_value == value && match_token(token_kind::int_literal), "", filepos);
}
let assert_token_float = fun(value: f64; filepos: string = __file_pos__()) => void {
    assert(token.float_value == value && match_token(token_kind::float_literal), "", filepos);
}
let assert_token_eof = fun(filepos: string = __file_pos__()) => void {
    assert(match_token(token_kind::eof), "", filepos);
}

let lex_test = fun() => void {
    init_stream("XY+(XY)_HELLO1,234+994\0");
    assert_token_ident("XY");
    assert_token("+");
    assert_token("(");
    assert_token_ident("XY");
    assert_token(")");
    assert_token_ident("_HELLO1");
    assert_token(",");
    assert_token_int(234);
    assert_token("+");
    assert_token_int(994);
    assert_token_eof();
    
    // MAX_UNSIGNED_I64 should not trigger overlflow check
    init_stream("18446744073709551615\0");
    assert_token_int(18446744073709551615);
    assert_token_eof();
    
    init_stream("0x1234\0");
    assert_token_int(0x1234);
    assert_token_eof();
    
    init_stream("0XFfFfaaaa\0");
    assert_token_int(0xFFFFAAAA);
    assert_token_eof();
    
    init_stream("0x0000 1234\0");
    assert_token_int(0);
    assert_token_int(1234);
    assert_token_eof();
    
    init_stream("2.5 3.141592654 0.123 42.\0");
    assert_token_float(2.5);
    assert_token_float(3.141592654);
    assert_token_float(0.123);
    assert_token_float(42.0);
    assert_token_eof();
    
    init_stream("0xFFFFFFFFFFFFFFFF\0");
    assert_token_int(0xFFFFFFFFFFFFFFFF);
    assert_token_eof();
}

let buf_test = fun() => void {
    var buf = string[]{ };
    buf_push(&buf, "foo");
    buf_push(&buf, "bar");
    buf_push(&buf, "poop");
    // debug_print("buf", buf);
    print("\n");
}

let print = fun(token: token) => void {
    debug_print("TOKEN", @i32 token.kind);
    if (token.kind == token_kind::identifier) {
        debug_print("__name", token.name);
    }
    elif (token.kind == token_kind::int_literal) {
        debug_print("__int", token.int_value);
    }
    elif (token.kind@i32 < 128) {
        var str: string;
        var char:i8 = token.kind@i8;
        str.data = &char;
        str.length = 1;
        debug_print("__char", str);
    }
}

var str_intern_buf: string[];
let str_intern = fun(str: string) => string {
    for (var str_idx = 0; str_idx < str_intern_buf.length; ++str_idx) {
        if (strings_are_equal(str, str_intern_buf[str_idx])) {
            return str_intern_buf[str_idx];
        }
    }
    var new_str = clone_string(str);
    buf_push(&str_intern_buf, new_str);
    return new_str;
}

let str_intern_test = fun() => void {
    var s0 = "hello";
    var s1 = "hello";
    assert(s0.data != s1.data);
    
    s0 = str_intern(s0);
    s1 = str_intern(s1);
    assert(s0.data == s1.data);
    
    var s2 = str_intern("foo");
    var s3 = str_intern("hello!");
    assert(s2.data != s3.data);
    assert(s0.data != s2.data);
    assert(s1.data != s2.data);
    assert(s0.data != s3.data);
    assert(s1.data != s3.data);
    
    str_intern_buf.length = 0;
}

[
	"compile.output": "prag.exe",
    "compile.debuginfo" : "true",
	"compile.entry" : "true",
    "compile.ll"    : "false",
	"compile.asm"   : "false",
 	"compile.opt"   : "0",
 	"compile.run"   : "true",
 	"compile.libs"  : "kernel32.lib",
	"compile.path"  : "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.14393.0\um\x64, lib"
]
let main = fun () => void {
    buf_test();
    str_intern_test();
    init_lex();
    lex_test();
}

