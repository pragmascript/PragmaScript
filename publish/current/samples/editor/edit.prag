import "../preamble.prag"
import "../math.prag"
import "../memory.prag"
import "../vec.prag"

import "edit_win.prag"
import "edit_opengl.prag"
import "edit_lexer.prag"
import "edit_commands.prag"
import "edit_text.prag"
import "edit_compile.prag"

let max_line_length = 1024;
let max_undo_points = 1024;
let text_chunk_line_count = 512;
let draw_chunk_colors = false;
let spaces_to_indent = 4;
    
let cursor = struct(
    pos: v3i;
    last_valid_char_pos: i32;
    target_char_pos: i32;
    
    draw_cursor: bool;
    cursor_last_blink_time: f32;
    
    selection_active: bool;
    selection_start: v3i;
    
    clipboard: string;
    
    should_scroll_to_cursor: bool;
);

let document = struct(
    file_name: string;
    chunks: text_chunk*;
    chunks_count: i32;
    chunks_capacity: i32;
    idx: i32;
);

let undo_chunk = struct(
    idx: i32;
    data: text_chunk;
);
let undo_point = struct(
    active_panel: editor_panel*;
    active_tab: panel_tab*;
    tab_data: panel_tab;
    document_chunks_count: i32;
    dirty_chunks: undo_chunk[];
);
let global_render_state = struct(
    font: font;
    font_size: f32;
    target_font_size: f32;
    
    color_scale: f32;
    target_color_scale: f32;
    color_scale_uniform_location: i32;
    time: f32;        
    delta_time: f32;
    temp_memory: memory_arena;
);
let panel_tab = struct(
    scroll_pos: v2;
    scroll_target: v2;
    document: document*;
    cursor: cursor;
    idx: i32;
);
let editor_panel = struct(
    render_region: rect;
    visible_line_count: i32;
    tabs: panel_tab[];
    active_tab: panel_tab*;
);
let character = struct(
    value: i8;
    token_type: i8;
);
let line = struct(
    chars: character[];
);
let text_chunk = struct(
    lines: line[];
    needs_syntax_highlight: bool;
    is_dirty_for_undo: bool;
);
let editor_state = struct(
    start_time_ticks: i64;
    last_keypress_time: f32;
    dirty_for_undo: bool;
    
    keyboard_state: i8*;
    shift_pressed: bool;
    control_pressed: bool;
    alt_pressed: bool;
    
    left_panel: editor_panel;
    right_panel: editor_panel;
    console_panel: editor_panel;
    active_panel: editor_panel*;
    
    documents: document[];
    
    global_render_state: global_render_state;
    
    undo_points: undo_point[];
    undo_pos: i32;
    
    commands: editor_command_mapping[];
);


let from_ascii = fun(value: i8) => character {
    return character { value };
}

let create_text_chunk = fun() => text_chunk {
    var result: text_chunk;
    
    var lines_size = size_of(line) * text_chunk_line_count@mm;
    var chars_size = size_of(character) * (max_line_length@mm) * text_chunk_line_count@mm;
    var total_size = lines_size + chars_size;
    var memory = allocate(total_size);
    
    result.lines.data = memory@line*;
    result.lines.length = 0;
    result.needs_syntax_highlight = false;
    result.is_dirty_for_undo = true;
    memory += lines_size;
    
    var text_block_ptr = memory@character*;
    for (var line_idx = 0; line_idx < text_chunk_line_count; ++line_idx) {
        result.lines[line_idx].chars.length = 0;
        result.lines[line_idx].chars.capacity = max_line_length;
        result.lines[line_idx].chars.data = text_block_ptr;
        text_block_ptr += max_line_length;
    }
    
    return result;
}

let clone_text_chunk = fun(chunk: text_chunk*) => text_chunk {
    var result = create_text_chunk();
    result.lines.length = chunk.lines.length;
    for (var line_idx = 0; line_idx < chunk.lines.length; ++line_idx) {
        var dest = result.lines.data + line_idx;
        var src = chunk.lines.data + line_idx;
        dest.chars.length = src.chars.length;
        dest.chars.capacity = src.chars.capacity;
        memcpy(dest.chars.data@ptr, src.chars.data@ptr, size_of(character) * src.chars.length@mm);
    }
    result.needs_syntax_highlight = chunk.needs_syntax_highlight;
    result.is_dirty_for_undo = chunk.is_dirty_for_undo;
    return result;
}

let recycle_chunk = fun(document_state: document*; chunk_idx: i32) => void {
    if (document_state.chunks_count == 0) {
        return;
    }
    assert(chunk_idx >= 0 && chunk_idx < document_state.chunks_count);
    var chunk = document_state.chunks + chunk_idx;
    free_chunk(chunk);
    for (var src_chunk_idx = chunk_idx + 1; src_chunk_idx < document_state.chunks_count; ++src_chunk_idx) {
        *(document_state.chunks + (src_chunk_idx - 1)) = *(document_state.chunks + src_chunk_idx);
    }
    document_state.chunks_count--;
}

let free_chunk = fun(chunk: text_chunk*) => void {
    free(chunk.lines.data@ptr);
}

let create_document = fun(idx: i32) => document {
    var result = document { };
    result.chunks_count = 0;
    result.chunks_capacity = 1024;
    result.chunks = allocate((result.chunks_capacity@mm) * size_of(text_chunk))@text_chunk*;
    add_empty_chunk(&result);
    result.chunks.lines.length = 1;
    result.idx = idx;
    return result;
}

let create_tab = fun(idx: i32; document: document*) => panel_tab {
    var result = panel_tab { };
    result.document = document;
    result.idx = idx;
    return result;
}

let create_panel = fun() => editor_panel {
    var result = editor_panel { };
    result.visible_line_count = 0;
    result.tabs.capacity = 1024;
    result.tabs.data = allocate(size_of(panel_tab) * result.tabs.capacity@mm)@panel_tab*;
    result.tabs.length = 0;
    result.active_tab = nullptr@panel_tab*;
    return result;
}

let create_editor_state = fun(editor_state: editor_state*) => void  {
    *editor_state = editor_state { };
    
    editor_state.documents.capacity = 1024;
    editor_state.documents.data = @document* allocate(@mm editor_state.documents.capacity * size_of(document));
    editor_state.documents.length = 0;
    
    editor_state.left_panel = create_panel();
    editor_state.right_panel = create_panel();
    //editor_state.console_panel = create_panel();
    editor_state.active_panel = &editor_state.left_panel;
    
    var global_render_state = &editor_state.global_render_state;
    editor_state.keyboard_state = allocate(256);
    
    editor_state.global_render_state.font_size = 32;
    editor_state.global_render_state.target_font_size = 32;
    editor_state.global_render_state.color_scale = 1.0;
    editor_state.global_render_state.target_color_scale = 1.0;
    editor_state.global_render_state.temp_memory = create_arena(megabytes(128));
    
    editor_state.undo_points.data = @undo_point* allocate(@mm max_undo_points * size_of(undo_point));
    editor_state.undo_points.length = 0;
    editor_state.undo_pos = 0;
    
    editor_state.commands.capacity = 1024;
    editor_state.commands.data = @editor_command_mapping* allocate(@mm editor_state.commands.capacity * size_of(editor_command_mapping));
    
    register_text_panel_commands(editor_state);
}
var editor_state: editor_state;

let add_empty_chunk = fun(document: document*) => text_chunk* {
    assert(document.chunks_count + 1 <= document.chunks_capacity);
    var chunk_ptr = document.chunks + document.chunks_count;
    *chunk_ptr = create_text_chunk();
    document.chunks_count++;
    return chunk_ptr;
}

let reset_cursor_blink = fun() => void {
    var cursor = &editor_state.active_panel.active_tab.cursor;
    cursor.draw_cursor = true;
    cursor.cursor_last_blink_time = editor_state.global_render_state.time;
}

// TODO(pragma): implement this like delete_selection()
// TODO(pragma): put the clipboard handling in a platfom layer we don't wanna depend on editor_win.prag
let paste_clipboard = fun(tab: panel_tab*) => void {
    var watermark = start_temp(&temp_memory_arena);
    
    var open_clipboard_result = Windows::OpenClipboard(window.handle);
    assert(open_clipboard_result != 0);
    
    var global_memory_handle = Windows::GetClipboardData(Windows::CF_TEXT);
    if (global_memory_handle != 0)
    {
        var global_memory_ptr = Windows::GlobalLock(global_memory_handle);
        assert(global_memory_ptr != nullptr);
        var char_count = strlen(global_memory_ptr);
        var clipboard = make_string(char_count@i32);
        memcpy(clipboard.data, global_memory_ptr, clipboard.length@mm);
        Windows::GlobalUnlock(global_memory_handle);
        
        paste_string(tab, clipboard);
        
    }
    Windows::CloseClipboard();
    stop_temp(&temp_memory_arena, watermark);
}

let copy_to_clipboard = fun(tab: panel_tab*; copy_to_os_clipboard: bool) => void {
    var first: v3i;
    var last: v3i;
    get_ordered_selection_bounds(&tab.cursor, &first, &last);
    copy_to_clipboard(tab, first, last, copy_to_os_clipboard);
}

let copy_to_clipboard = fun(tab: panel_tab*; first: v3i; last: v3i; copy_to_os_clipboard: bool) => void {
    var document = tab.document;
    var cursor = &tab.cursor;
    
    if (cursor.clipboard.data != nullptr) {
        free(cursor.clipboard.data);
    }
    var watermark = start_temp(&temp_memory_arena);
    
    var char_ptr: i8* = nullptr;
    var char_count = 0;

    for (var z = first.z; z <= last.z; ++z) {
        var current_chunk = document.chunks + z;
        var y_from = 0;
        var y_to = current_chunk.lines.length - 1;
        if (z == first.z) {
            y_from = first.y;
        }
        if (z == last.z) {
            y_to = last.y;
        }
        for (var y = y_from; y <= y_to; ++y) {
            var current_line = current_chunk.lines[y];
            var first_x = 0;
            var last_x = current_line.chars.length;
            if (z == first.z && y == first.y) {
                first_x = first.x;
            }
            if (z == last.z && y == last.y) {
                last_x = last.x;
            }
            for (var x = first_x; x < last_x; ++x) {
                char_ptr = push(&temp_memory_arena, 1);
                var chr = &current_line.chars[x];
                *char_ptr = chr.value;
                char_count++;
            }
            if (z != last.z || y != last.y) {
                char_ptr = push(&temp_memory_arena, 1);
                *char_ptr = 13;
                char_count++;
                char_ptr = push(&temp_memory_arena, 1);
                *char_ptr = 10;
                char_count++;
            }
        }
    }
    if (char_count > 0) {
        cursor.clipboard.data = allocate(char_count@mm + 1);
        cursor.clipboard.length = char_count;
        var dest = cursor.clipboard.data;
        var src = char_ptr - (char_count - 1);
        memcpy(dest, src, (char_count@mm) * size_of(i8));
        
        // null terminate for windows clipboard handling
        cursor.clipboard[cursor.clipboard.length] = 0;
    } else {
        return;
    }
    
    // TODO(pragma): put the clipboard handling in a platfom layer we don't wanna depend on editor_win.prag
    if (copy_to_os_clipboard) {
        var error_code = Windows::OpenClipboard(window.handle);
        assert(error_code != 0);
        error_code = Windows::EmptyClipboard();
        assert(error_code != 0);
        
        var global_mem_handle = Windows::GlobalAlloc(Windows::GMEM_MOVEABLE, (char_count + 1)@mm);
        assert(global_mem_handle != 0);    
        
        var global_mem_ptr = Windows::GlobalLock(global_mem_handle);
        assert(global_mem_ptr != nullptr);
        memcpy(global_mem_ptr, cursor.clipboard.data, (char_count + 1)@mm);
        Windows::GlobalUnlock(global_mem_handle);
        
        var clipboard_data_result = Windows::SetClipboardData(Windows::CF_TEXT, global_mem_handle);
        assert(clipboard_data_result != 0);
        
        error_code = Windows::CloseClipboard();
        assert(error_code != 0);
    }
    
    stop_temp(&temp_memory_arena, watermark);
}

let syntax_highlight = fun(document: document*) => void {
    var t0 = get_perf_counter();
    for (var chunk_idx = 0; chunk_idx < document.chunks_count; ++chunk_idx) {
        var chunk = document.chunks + chunk_idx;
        if (chunk.needs_syntax_highlight) {
            for (var line_idx = 0; line_idx < chunk.lines.length; ++line_idx) {
                tokenize(chunk.lines.data + line_idx);
            }
            chunk.needs_syntax_highlight = false;
        }
    }
    var t1 = get_perf_counter();
    // debug_print("syntax_highlight time [ms]", get_ms_elapsed(t0, t1));
}

let mark_dirty = fun(chunk: text_chunk*) => void {
    chunk.needs_syntax_highlight = true;
    chunk.is_dirty_for_undo = true;
}

let free_undo_point = fun(up: undo_point*) => void {
    for (var uc_idx = 0; uc_idx < up.dirty_chunks.length; ++uc_idx) {
        free_chunk(&up.dirty_chunks[uc_idx].data);
    }
    free(up.dirty_chunks.data@ptr);
}

let add_undo_point = fun(editor_state: editor_state*; tab: panel_tab*) => void {
    var up = undo_point { };
    up.active_panel = editor_state.active_panel;
    up.active_tab = editor_state.active_panel.active_tab;
    up.tab_data = *up.active_tab;
    var doc = up.active_tab.document;
    up.document_chunks_count = doc.chunks_count;
    var dirty_chunk_count = 0;
    for (var chunk_idx = 0; chunk_idx < doc.chunks_count; ++chunk_idx) {
        var chunk = doc.chunks + chunk_idx;
        if (chunk.is_dirty_for_undo) {
            dirty_chunk_count++;
        }
    }
    if (dirty_chunk_count > 0) {
        up.dirty_chunks.length = dirty_chunk_count;
        up.dirty_chunks.data = allocate(size_of(undo_chunk) * dirty_chunk_count@mm)@undo_chunk*;
        var dirty_chunk_idx = 0;
        for (var chunk_idx = 0; chunk_idx < doc.chunks_count; ++chunk_idx) {
            var chunk = doc.chunks + chunk_idx;
            if (chunk.is_dirty_for_undo) {
                var uc = undo_chunk { };
                uc.idx = chunk_idx;
                uc.data = clone_text_chunk(chunk);
                up.dirty_chunks[dirty_chunk_idx++] = uc;
                chunk.is_dirty_for_undo = false;
            }
        }
        if (editor_state.undo_pos + 1 < max_undo_points) {
            if (editor_state.undo_points.length >= editor_state.undo_pos + 1) {
                for (var idx = editor_state.undo_pos; idx < editor_state.undo_points.length; ++idx) {
                    free_undo_point(&editor_state.undo_points[idx]);
                }
                editor_state.undo_points.length = editor_state.undo_pos + 1;
            } else {
                editor_state.undo_points.length++;
                assert(editor_state.undo_points.length == editor_state.undo_pos + 1);
            }
            editor_state.undo_points[editor_state.undo_pos] = up;
            editor_state.undo_pos++;
            // debug_print("undo_pos", editor_state.undo_pos);
        }
    }
    editor_state.dirty_for_undo = false;
}

let restore_undo_point = fun(editor_state: editor_state*; up: undo_point*) => void {
    editor_state.dirty_for_undo = false;
    editor_state.active_panel = up.active_panel;
    editor_state.active_panel.active_tab = up.active_tab;
    *editor_state.active_panel.active_tab = up.tab_data;
    
    var temp_up = up;
    var temp_tab = editor_state.active_panel.active_tab;
    
    var doc = up.tab_data.document;
    doc.chunks_count = up.document_chunks_count;
    assert(up.document_chunks_count > 0);
    while(doc.chunks_count > up.document_chunks_count) {
        doc.chunks_count--;
        free_chunk(doc.chunks + doc.chunks_count);
    }
    for (var uc_idx = 0; uc_idx < up.dirty_chunks.length; ++uc_idx) {
        var uc = &up.dirty_chunks[uc_idx];
        assert(uc.idx >= 0 && uc.idx < up.document_chunks_count);
        free_chunk(doc.chunks + uc.idx);
        var cloned_chunk = clone_text_chunk(&uc.data);
        cloned_chunk.is_dirty_for_undo = false;
        *(doc.chunks + uc.idx) = cloned_chunk;
    }
}

let undo = fun(editor_state: editor_state*) => void {
    if (editor_state.undo_pos <= 1) {
        return;
    }
    editor_state.undo_pos--;
    
    var up = &editor_state.undo_points[editor_state.undo_pos - 1];
    restore_undo_point(editor_state, up);
    editor_state.dirty_for_undo = false;
}

let redo = fun(editor_state: editor_state*) => void {
    if (editor_state.undo_pos >= editor_state.undo_points.length) {
        return;
    }
    editor_state.undo_pos++;
    var up = &editor_state.undo_points[editor_state.undo_pos - 1];
    // debug_print("redo", editor_state.undo_pos);
    restore_undo_point(editor_state, up);
    editor_state.dirty_for_undo = false;
}

let handle_search_key_down = fun(vk_code: i32) => void {
    var char_word: i16 = 0;
    GetKeyboardState(editor_state.keyboard_state);
    ToAscii(vk_code, vk_code, editor_state.keyboard_state, &char_word, 0);
    char_word = 0xFF & char_word;
    var char = from_ascii(char_word@i8);
    
    if (is_printable(char.value@i8)) {
    }
}

let handle_console_key_down = fun(vk_code: i32; console: editor_panel*) => void {
}

let handle_text_panel_key_down = fun(vk_code: i32; active_panel: editor_panel*; should_syntax_highlight: bool; 
                                     should_auto_indent: bool) => void {
    var active_tab = active_panel.active_tab;
    if (active_tab@ptr == nullptr) {
        return;
    }
    
    var document = active_tab.document;
    var cursor = &active_tab.cursor;
    var old_cursor_pos = cursor.pos;
    var current_chunk = document.chunks + cursor.pos.z;
    var lines = current_chunk.lines;
    var lines_ptr = &current_chunk.lines;
    var current_line = &lines[cursor.pos.y];
    
    var cmd_ctx = command_context { };
    cmd_ctx.active_panel = active_panel;
    cmd_ctx.active_tab = active_tab;
    cmd_ctx.document = document;
    cmd_ctx.cursor = cursor;
    cmd_ctx.current_chunk = current_chunk;
    cmd_ctx.lines = lines;
    cmd_ctx.current_line = current_line;
    cmd_ctx.should_clear_selection = true;
    cmd_ctx.suppress_new_selection = false;
    cmd_ctx.should_auto_indent = should_auto_indent;
    cmd_ctx.old_editor_dirty_for_undo = editor_state.dirty_for_undo;
    
    assert(current_line.chars.length >= 0 && current_line.chars.length < max_line_length);
    assert(cursor.pos.x <= current_line.chars.length);
    assert(cursor.pos.y < lines.length);
    assert(lines.length <= text_chunk_line_count);
    assert(lines.length > 0);
    
    // TODO(pragma): this could be more finegrain
    editor_state.dirty_for_undo = true;
    
    var char_word: i16 = 0;
    var key_state_result = GetKeyboardState(editor_state.keyboard_state);
    assert(key_state_result != 0);
    
    editor_state.shift_pressed = *(editor_state.keyboard_state + VK_SHIFT) < 0;
    editor_state.control_pressed = *(editor_state.keyboard_state + VK_CONTROL) < 0;
    editor_state.alt_pressed = *(editor_state.keyboard_state + VK_MENU) < 0;
    
    ToAscii(vk_code, vk_code, editor_state.keyboard_state, &char_word, 0);
    char_word = 0xFF & char_word;
    var char = from_ascii(char_word@i8);
    
    let current_ctx = CTX_TEXT;    
    
    if (is_printable(char.value@i8)) {
        if (cursor.selection_active) {
            delete_selection(active_tab);
            current_chunk = document.chunks + cursor.pos.z;
            lines = current_chunk.lines;
            lines_ptr = &current_chunk.lines;
            current_line = &lines[cursor.pos.y];
        }
        if (should_auto_indent && char.value == ord("}")) {
            if (left_is_whitespace(current_line, cursor.pos.x)) {
                for (var back_idx = 0; back_idx < spaces_to_indent; ++back_idx) {
                    handle_backspace(active_tab);
                }    
            }
        }
        add_char_to_line(current_line, cursor.pos.x++, char);
        cursor.last_valid_char_pos = cursor.pos.x;
        if (current_line.chars.length < max_line_length) {
            current_line.chars[current_line.chars.length] = character { 0 };
        }
        mark_dirty(current_chunk);
    } else {
        var handled = false;
        for (var cmd_idx = 0; cmd_idx < editor_state.commands.length; ++cmd_idx) {
            var cmd_map = editor_state.commands[cmd_idx];
            if ((cmd_map.ctx_flags & current_ctx) != 0) {
                var kc = cmd_map.key_combo;
                if (kc.vk_code == vk_code
                    && kc.shift == editor_state.shift_pressed
                    && kc.control == editor_state.control_pressed
                    && kc.alt == editor_state.alt_pressed) {
                    handled |= cmd_map.command(&cmd_ctx);
                }    
            }
            if (handled) {
                break;
            }
        }
        if (!handled) {
            cmd_ctx.should_clear_selection = false;
        }
    }
    
    if (should_syntax_highlight) {
        syntax_highlight(document);
    }
        
    current_chunk = document.chunks + cursor.pos.z;
    lines = current_chunk.lines;
    cursor.pos.y = Math::clamp(cursor.pos.y, 0, current_chunk.lines.length - 1);
    cursor.pos.x = Math::clamp(cursor.last_valid_char_pos, 0, lines[cursor.pos.y].chars.length);
    
    var has_cursor_moved = !equal(active_tab.cursor.pos, old_cursor_pos);
    active_tab.cursor.should_scroll_to_cursor = has_cursor_moved;
    if (has_cursor_moved) {
        reset_cursor_blink();
    }
    var old_cursor_pos_valid = old_cursor_pos.y < lines.length && old_cursor_pos.x <= lines[old_cursor_pos.y].chars.length;
    if (!cmd_ctx.suppress_new_selection)
    {
        if (!is_printable(char.value@i8) && editor_state.shift_pressed && !cursor.selection_active && has_cursor_moved && old_cursor_pos_valid) {
            cursor.selection_active = true;
            cursor.selection_start = old_cursor_pos;
        }    
    }
    if (!editor_state.shift_pressed && cmd_ctx.should_clear_selection) {
        active_tab.cursor.selection_active = false;
    }

#if DEBUG
    lines_ptr = &current_chunk.lines;
    current_line = &lines[cursor.pos.y];
    assert(current_line.chars.length >= 0 && current_line.chars.length < max_line_length);
    assert(cursor.pos.x <= current_line.chars.length);
    assert(cursor.pos.y < lines_ptr.length);
    assert(lines_ptr.length <= text_chunk_line_count);
#endif

}

let handle_editor_key_down = fun(vk_code: i32; should_syntax_highlight: bool; should_auto_indent: bool) => void {
    editor_state.last_keypress_time = editor_state.global_render_state.time;
    var active_panel = editor_state.active_panel;
    if (active_panel == &editor_state.console_panel) {
        handle_console_key_down(vk_code, active_panel);
    } else {
        handle_text_panel_key_down(vk_code, active_panel, should_syntax_highlight, should_auto_indent);
    }
}

let handle_editor_key_up = fun(vk_code: i32) => void {
}

let add_document = fun(editor_state: editor_state*) => document* {
    var result: document* = nullptr@document*;
    if (editor_state.documents.length < editor_state.documents.capacity) {
        var idx = editor_state.documents.length++;
        result = &editor_state.documents[idx];
        *result = create_document(idx);
    }
    return result;
}

let add_tab = fun(panel: editor_panel*; document: document*) => panel_tab* {
    var result: panel_tab* = nullptr@panel_tab*;
    if (panel.tabs.length < panel.tabs.capacity) {
        var idx = panel.tabs.length++;
        result = &panel.tabs[idx];
        *result = create_tab(idx, document);
        panel.active_tab = result;
    }
    return result;
}

let load_text_file = fun(tab: panel_tab*; file_name: string) => void {
    var temp_file_name = file_name;
    var document = tab.document;
    var watermark = start_temp(&temp_memory_arena);
    var txt = read_file(file_name);
    if (txt.length > 0) {
        paste_string(tab, txt);
        document.file_name = file_name;
    } else {
        debug_print("could not load text file with argument", file_name);
    }
    syntax_highlight(document);
    tab.cursor.pos = v3iz;
    stop_temp(&temp_memory_arena, watermark);
}

let load_all_files_in_directory = fun(editor_state: editor_state*; dir: string) => void {
    var data = WIN32_FIND_DATA {};
    var wc = concat(dir[:-1], "*.prag\0");
    var handle = Windows::FindFirstFileA(cstr(wc), &data);
    if (handle != Windows::INVALID_HANDLE_VALUE) {
        while (true) {
            var file_name = clone_string(concat(dir[:-1], from_cstr(&data.FileName[0], 260)));
            debug_print("filename", file_name);
            var doc = add_document(editor_state);
            var left_tab = add_tab(&editor_state.left_panel, doc);
            load_text_file(left_tab, file_name);
            var right_tab = add_tab(&editor_state.right_panel, doc);
            left_tab.cursor.pos = v3iz;
            right_tab.cursor.pos = v3iz;
            syntax_highlight(doc);
            if (Windows::FindNextFileA(handle, &data) == 0) {
                break;
            }
        }
    }
}

let save_text_file = fun(tab: panel_tab*) => bool {
    var document = tab.document;
    if (document.file_name.length > 0) {
        var first = v3iz;
        var last: v3i;
        last.z = document.chunks_count - 1;
        var chunk = document.chunks + (document.chunks_count - 1);
        last.y =  chunk.lines.length - 1;
        last.x = chunk.lines[last.y].chars.length;
        copy_to_clipboard(tab, first, last, false);
        write_file(document.file_name, tab.cursor.clipboard);
        return true;
    }
    return false;
}

var frames = 0;
let render = fun(editor_state: editor_state*; window_state: window_state*) => void {
    var t0 = get_perf_counter();
    var time = get_seconds_elapsed(editor_state.start_time_ticks, t0);
    var render_state = &editor_state.global_render_state;
    render_state.delta_time = time@f32 - render_state.time;
    render_state.time = time@f32;
    render_opengl(window_state.client_width, window_state.client_height, editor_state, window_state.dc);
    var t1 = get_perf_counter();
    if (editor_state.dirty_for_undo && render_state.time - editor_state.last_keypress_time > 0.1) {
        add_undo_point(editor_state, editor_state.active_panel.active_tab);
    }
    frames++;
    // if (frames == 600) {
    //     debug_print("ms elapsed: ", get_seconds_elapsed(t0, t1) * 1000.0);
    //     frames = 0;
    // }
}
