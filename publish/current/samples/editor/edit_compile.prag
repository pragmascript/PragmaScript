import "../preamble.prag"
import "../windows.prag"
import "edit.prag"

let compile_buffer = fun(path: string) => void
{
    var cmd = "..\\..\\..\\bin\\pragma.exe -D ";
    cmd = concat(cmd, path);
    
    var sa = Windows::SECURITY_ATTRIBUTES {};
	sa.nLength = size_of(Windows::SECURITY_ATTRIBUTES)@i32;
	sa.InheritHandle = 1;
	
	var stdin_pipe_read: mm = 0;
	var	stdin_pipe_write: mm = 0;
	var stdout_pipe_read: mm = 0;
	var stdout_pipe_write: mm = 0;
	
	var success = 1;
	success = Windows::CreatePipe(&stdin_pipe_read, &stdin_pipe_write, &sa, 0);
	assert(success != 0);
	success = Windows::CreatePipe(&stdout_pipe_read, &stdout_pipe_write, &sa, 0);
	assert(success != 0);
    
    
    var si = Windows::STARTUPINFOA {};
	si.cb = size_of(Windows::STARTUPINFOA)@i32;
	si.dwFlags = Windows::STARTF_USESTDHANDLES;
	si.hStdError = stdout_pipe_write;
	si.hStdOutput = stdout_pipe_write;
	si.hStdInput = stdin_pipe_read;
	
	var pi = Windows::PROCESS_INFORMATION {};
	Windows::CreateProcessA(nullptr, cstr(cmd), nullptr, nullptr, 1, 0, nullptr, nullptr, &si, &pi);
	
	Windows::CloseHandle(stdout_pipe_write);
	Windows::CloseHandle(stdin_pipe_read);
	
	var buf: i8[1025];
	memset(&buf[0], 0, len(buf));
	
	var bytes_read = 0;
	success = Windows::ReadFile(stdout_pipe_read, &buf[0], 1024, &bytes_read, nullptr);
	while (success != 0) {
		debug_print("output", buf[:bytes_read]);
		print("\n");
		success = Windows::ReadFile(stdout_pipe_read, &buf[0], 1024, &bytes_read, nullptr);
	}
	Windows::CloseHandle(stdout_pipe_read);
	Windows::CloseHandle(stdin_pipe_write);
	
	Windows::CloseHandle(pi.hProcess);
	Windows::CloseHandle(pi.hThread);
}