import "../preamble.prag"
import "../random.prag"
import "../simd.prag"
import "../math.prag"

let print_vec = fun(v: f32_4x) => void 	{
	print("v: ");
	print(v[0]);
	print(", ");
	print(v[1]);
	print(", ");
	print(v[2]);
	print(", ");
	print(v[3]);
	print("\n");
}

let print_vec = fun(v: i32_4x) => void {
	print("v: ");
	print(v[0]);
	print(", ");
	print(v[1]);
	print(", ");
	print(v[2]);
	print(", ");
	print(v[3]);
	print("\n");
}

#if FALSE
let print_vec = fun(v: f32_8x) => void 	{
	print("v: ");
	for (var i = 0; i < 8; ++i) {
		print(v[0]);
		if (i != 7) {
			print(", ");		
		}
	}
	print("\n");
}
#endif


let foo = struct (
	a: i32;
	b: i32;	
);


[
	"compile.output": "test_simd.exe",
	"compile.debuginfo": "true",
	"compile.entry" : "true",
	"compile.ll"    : "true",
	"compile.asm"   : "false",
 	"compile.opt"   : "0",
 	"compile.run"   : "true",
 	"compile.libs"  : "kernel32.lib, libopenlibm.a"
]
let main = fun () => void {
	// print_vec(Random::rand_v4());
	// print_vec(Random::rand_v4());
	// print_vec(Random::rand_v4());
	// print_vec(Random::rand_v4());
	// print_vec(Random::rand_v4());
	// print_vec(Random::rand_v4());
	
	// var arr = [SIMD::set1_ps(0.0), SIMD::set1_ps(1.0), SIMD::set1_ps(2.0)];
	
	// var a = i32_4x { 1, 2, 3, 4};
	// var b = SIMD::srli_si128(a, 3);
	// debug_print("a", a);
	// debug_print("b", b);
	
	
	var mask = SIMD::set1_epi32(0x00FF00FF);
	var test = SIMD::cvtepi32_ps(mask);
	debug_print("mask", mask);
	debug_print("test", test);
	
	
	// var foobarzuz = Random::rand_f32_4x() < Random::rand_f32_4x();
	
	
	// var y = Math::exp(x);
	
	
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	// debug_print("rnd", Random::rand_i32());
	
}