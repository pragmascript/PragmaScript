import "../preamble.prag"
import "..\math.prag"
import "handmade_interface.prag"
import "handmade_math.prag"


mod Handmade.Game
{
    let game_state = struct
    (
        is_initialized: bool;

        exit: bool;

        player_x: f32;
        player_y: f32;
        new_player_x: f32;
        new_player_y: f32;

        sound_t: f32;

    );


    let world = struct 
    (
        offset: i32;
        tile_size: i32;
        tile_maps: tile_map[2, 2];
    );
    
    let tile_map = struct
    (        
        data: i32[9, 16];
    );

    ["dll.export"]
    let game_update_and_render = fun
    (
        memory: game_memory*;
        input: game_input*;
        render_target: game_render_target*;
    ) => bool
    {
        var result = true;
        var game_state = get_game_state(memory);
        handle_player_input(game_state, input);

        if (game_state.exit) {
            result = false;
        }
        
        

        var background_color = color { 0.25, 0.35, 0.45, 1.0 };
        // animate_background_color(&background_color, input.time.t);
        draw_rectangle(render_target, min_max_rect(0, 0, render_target.width, render_target.height), background_color);

        let tile_size = 72;
        let offset = tile_size / 2;
        
        
        let data_00 = [
            [1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1],
            [1, 1, 0, 0,  0, 1, 0, 0,  0, 0, 0, 0,  0, 0, 1, 1],
            [1, 1, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 1],
            [0, 0, 0, 0,  0, 1, 0, 0,  1, 0, 0, 0,  0, 0, 0, 0],
            [1, 1, 0, 0,  0, 1, 0, 0,  1, 0, 0, 0,  0, 1, 0, 1],
            [1, 0, 0, 0,  0, 1, 0, 0,  1, 0, 0, 0,  1, 0, 0, 1],
            [1, 1, 1, 1,  1, 0, 0, 0,  0, 0, 0, 0,  0, 1, 0, 1],
            [1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1]
        ];
        let data_10 = [
            [1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1]
        ];
        let data_01 = [
            [1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1, 1,  1, 1, 1, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [0, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  1, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1]
        ];
        let data_11 = [
            [1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 1],
            [0, 0, 0, 0,  0, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 1,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1],
            [1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1]
        ];


        var world: world;
        world.tile_size = tile_size;
        world.offset = offset;
        world.tile_maps[0, 0].data = data_00;
        world.tile_maps[1, 0].data = data_10;
        world.tile_maps[0, 1].data = data_01;
        world.tile_maps[1, 1].data = data_11;
        
        var current_tile_map = &world.tile_maps[0, 0];
        render_tilemap(&world, current_tile_map, render_target);

        var player_size = tile_size / 2;
        var hs = player_size@f32 / 2;
        
        var is_valid = true;
        is_valid &= !is_blocked(&world, current_tile_map, game_state.new_player_x + hs, game_state.new_player_y + hs);
        is_valid &= !is_blocked(&world, current_tile_map, game_state.new_player_x - hs, game_state.new_player_y + hs);
        if (is_valid) {
            game_state.player_x = game_state.new_player_x;
            game_state.player_y = game_state.new_player_y;
        }        

        // draw player
        let player_color = color { 0.3, 0.5, 0.8, 1.0 };
        var px = game_state.player_x;
        var py = game_state.player_y;
        var tsh = tile_size@f32 / 2;
        var tx = @i32 ((px+hs - offset@f32 + tsh) / tile_size@f32);
        var ty = @i32 ((py+hs - offset@f32 + tsh) / tile_size@f32);
        var pos_x = offset + tx * tile_size;
        var pos_y = offset + ty * tile_size;

        let blue = color { 0, 0, 1, 1};
        draw_rectangle(render_target, center_half_size_rect(pos_x, pos_y, tile_size/2), blue);
        draw_rectangle(render_target, center_half_size_rect(Math.round_to_i32(px), Math.round_to_i32(py), player_size/2), player_color);
        
        // draw mouse cursor
        let cursor_color = color {0.5, 0.5, 0.5, 1.0};
        let cursor_size = 15;
        if (!input.left_mb.pressed) {
            draw_rectangle(render_target, center_half_size_rect(input.mouse_x, input.mouse_y, cursor_size), cursor_color);
        } else {
            draw_rectangle(render_target, center_half_size_rect(input.mouse_x, input.mouse_y, cursor_size + 5), cursor_color);   
        }
        
        consume_buttons(input);
        return result;
    }

    let render_tilemap = fun(world: world*; tile_map: tile_map*; render_target: game_render_target*) => void {
        var background_color = color { 0.25, 0.35, 0.45, 1.0 };
        let red = color {1.0, 0.0, 0.0, 1.0};
        let green = color {0.0, 1.0, 0.0, 1.0};
        let blue =  color {0.0, 0.0, 1.0, 1.0};
        for (var y = 0; y < len(tile_map.data, 0)@\i32; ++y) {
            for (var x = 0; x < len(tile_map.data, 1)@\i32; ++x) {
                var tile_id = tile_map.data[y, x];
                var color = color {};
                
                
                if (tile_id == 0) {
                    color = background_color;
                } elif (tile_id == 1) {
                    color = red;
                }
                var pos_x = world.offset + x * world.tile_size;
                var pos_y = world.offset + y * world.tile_size;
                
                draw_rectangle(render_target, center_half_size_rect(pos_x, pos_y, world.tile_size/2), color);
            }
        }
    }

    let is_blocked = fun (world: world*; @tile_map: tile_map*; x: f32; y: f32) => bool {
        var tsh = world.tile_size@f32 / 2;
        var tx = @i32 ((x - world.offset@f32 + tsh) / world.tile_size@f32);
        var ty = @i32 ((y - world.offset@f32 + tsh) / world.tile_size@f32);
        // debug_print_i32("tx", tx);
        // debug_print_i32("ty", ty);

        if (tx >= 0 && tx < len(data, 1)@\i32 && 
            ty >= 0 && ty < len(data, 0)@\i32) {
            var tile_value = data[ty, tx];
            if (tile_value == 0) {
                return false;
            } 
        }
        return true;
    }

    let animate_background_color = fun
    (
        @background_color: color*;
        t: f32;
    ) => void
    {
        r += 0.25 * Math.sin(t * 5.0);
        g += 0.25 * Math.sin(t * 4.2 + 0.5);
        b += 0.25 * Math.cos(t * 5.1);
    }

    ["dll.export"]
    let game_output_sound = fun
    (
        game_memory: game_memory*; 
        @sound_output: game_sound_output*;
    ) => void
    {
        var debug_sound_output = sound_output;
        var game_state = get_game_state(game_memory);
        var sample = sample_out;
        assert(sample@ptr != nullptr);
        
        let tone_hz = 800.0;
        let volume = 0.1;
        var delta_t = 1.0 / @f32 samples_per_second;
        // var t = Math.remainder(game_state.sound_t, Math.tau_32);
        var t = game_state.sound_t;

        for (var i: i32 = 0; i < sample_count; ++i) {
            // var v = Math.lerp(game_state.volume, game_state.target_volume, t);
            var p = tone_hz * Math.tau_32 * t;
            var x = @i16 (32767 * volume * Math.sin(p));
            *sample++ = x;
            *sample++ = x;
            t += delta_t;
        }
        // debug_print_i32("sc", sample_count);
        // debug_print_f32("sound_t", t);
        game_state.sound_t = t;
    }

    let get_game_state = fun (memory: game_memory*) => game_state* 
    {
        var game_state = @game_state* memory.permanent_data;
        if (!game_state.is_initialized) {
            game_state.is_initialized = true;
            game_state.player_x = 610;
            game_state.player_y = 50;
            game_state.new_player_x = game_state.player_x;
            game_state.new_player_y = game_state.player_y;
        }
        return game_state;
    }

    let handle_player_input = fun 
    (
        @game_state: game_state*;
        @game_input: game_input*; 
    ) => void 
    {
        if (request_quit && !exit) {
            exit = true;
        }
   
        var delta_x = 0.0;
        var delta_y = 0.0;

        if (up_arrow.pressed) {
            delta_y -= 1;
        }
        if (down_arrow.pressed) {
            delta_y += 1;
        }
        if (left_arrow.pressed) {
            delta_x -= 1;
        }
        if (right_arrow.pressed) {
            delta_x += 1;
        }
        delta_x *= 128;
        delta_y *= 128;
        new_player_x = player_x + delta_x * time.dt;
        new_player_y = player_y + delta_y * time.dt;
    }

    let consume_buttons = fun
    (
        @input: game_input*;
    ) => void
    {
        consume_button(&up_arrow);
        consume_button(&down_arrow);
        consume_button(&left_arrow);
        consume_button(&right_arrow);
        consume_button(&left_mb);
        consume_button(&right_mb);
        consume_button(&middle_mb);
    }

    let consume_button = fun
    (
        @button: game_button*;
    ) => void
    {
        down = false;
        up = false;
    }

    let draw_rectangle = fun
    (
        buffer: game_render_target*;
        rect: rectangle;
        color: color;
    ) => void
    {
        var min_x_p = @i32 Math.round(rect.pos.x);
        var min_y_p = @i32 Math.round(rect.pos.y);
        var max_x_p = @i32 Math.round(rect.pos.x + rect.size.x);
        var max_y_p = @i32 Math.round(rect.pos.y + rect.size.y);
        if (min_x_p < 0) {
            min_x_p = 0;
        }
        if (min_y_p < 0) {
            min_y_p = 0;
        }
        if (max_x_p > buffer.width) {
            max_x_p = buffer.width;
        }
        if (max_y_p > buffer.height) {
            max_y_p = buffer.height;
        }

        var r = @i32 Math.round(color.r * 255);
        r = Math.clamp_i32(r, 0, 255);
        var g = @i32 Math.round(color.g * 255);
        g = Math.clamp_i32(g, 0, 255);
        var b = @i32 Math.round(color.b * 255);
        b = Math.clamp_i32(b, 0, 255);
        var c = (r << 16) | (g << 8) | (b << 0);

        var row: i8* = buffer.memory;
        row += min_y_p * buffer.pitch;
        row += 4 * min_x_p;
        for (var y = min_y_p; y < max_y_p; ++y) {
            var pixel = @i32* row;
            for (var x = min_x_p; x < max_x_p; ++x) {
                *(pixel++) = c;    
            }    
            row += buffer.pitch;
        }
    }

    [
    "compile.entry",
    "compile.cpu"   : "nehalem",
    "compile.dll"   : "true",
    "compile.output": "handmade.dll",
    "compile.debuginfo": "true",
    "compile.opt"   : "0",
    "compile.ll"    : "true",
    "compile.run"   : "false",
    "compile.path"  : "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.14393.0\um\x64, lib",
    "compile.libs"  : "kernel32.lib, libopenlibm.a"
    ]
    let main = fun () => void  
    {
    }
}