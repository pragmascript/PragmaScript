mod Linux
{
    ["stub"]
	let __write = extern fun(fd: i32; buf: ptr; size: mm) => i64;
    
    ["stub"]
    let __read = extern fun(fd: i32; buf: ptr; size: mm) => i64;

    ["stub"]
    let __open = extern fun(filename: i8*; flags: i32; mode: i32) => i32;

    ["stub"]
    let __openat = extern fun(dirfd: i32; filename: i8*; flags: i32; mode: i32) => i32;

    ["stub"]
    let __mmap = extern fun(addr: ptr; length: mm; prot: i32; flags: i32; fd: i32; offset: mm) => ptr;

    ["stub"]
    let __munmap = extern fun(addr: ptr; length: mm) => i32;

    let MAP_SHARED =     0x01;
    let MAP_PRIVATE =    0x02;
    let MAP_TYPE =       0x0F;
    let MAP_FIXED =      0x10;
    let MAP_ANON =       0x20;
    let MAP_ANONYMOUS =  MAP_ANON;
    let MAP_NORESERVE =  0x4000;
    let MAP_GROWSDOWN =  0x0100;
    let MAP_DENYWRITE =  0x0800;
    let MAP_EXECUTABLE = 0x1000;
    let MAP_LOCKED =     0x2000;
    let MAP_POPULATE =   0x8000;
    let MAP_NONBLOCK =   0x10000;
    let MAP_STACK =      0x20000;
    let MAP_HUGETLB =    0x40000;
    let MAP_FILE =       0;

    let PROT_NONE =      0;
    let PROT_READ =      1;
    let PROT_WRITE =     2;
    let PROT_EXEC =      4;
    let PROT_GROWSDOWN = 0x01000000;
    let PROT_GROWSUP =   0x02000000;

    let MS_ASYNC =       1;
    let MS_INVALIDATE =  2;
    let MS_SYNC =        4;

    let MCL_CURRENT =    1;
    let MCL_FUTURE =     2;
    let MCL_ONFAULT =    4;

    let POSIX_MADV_NORMAL =     0;
    let POSIX_MADV_RANDOM =     1;
    let POSIX_MADV_SEQUENTIAL = 2;
    let POSIX_MADV_WILLNEED =   3;
    let POSIX_MADV_DONTNEED =   4;

    let O_ACCMODE =	    0x0003;
    let O_RDONLY =	    0x0000;
    let O_WRONLY =	    0x0001;
    let O_RDWR =		0x0002;
    let O_CREAT =	    0x0040;
    let O_EXCL =		0x0080;
    let O_NOCTTY =	    0x0100;
    let O_TRUNC =	    0x0200;
    let O_APPEND =	    0x0400;
    let O_NONBLOCK =	0x0800;
    let O_NDELAY =	    O_NONBLOCK;
    let O_SYNC =	    0x101000;
    let O_FSYNC =		O_SYNC;
    let O_ASYNC =	    0x2000;
    let O_LARGEFILE =	0x8000;

    let AT_FDCWD =		-100;


}