import "..\preamble.prag"
import "..\windows.prag"
import "..\random.prag"
import "..\math.prag"


with Windows;

// https://www.shadertoy.com/view/Xdf3zB
// https://www.shadertoy.com/view/4scfz4

let Vec = struct 
(
    x: f32;
    y: f32;
    z: f32;
);
let v3 = fun (x: f32; y: f32; z: f32) => Vec {
    var result = Vec { x, y, z};
    return result;
}
let vz = Vec {0.0, 0.0, 0.0};
let add = fun (a: Vec*; b: Vec*) => Vec {
    var result = Vec { a.x + b.x, a.y + b.y, a.z + b.z};
    return result;
}
let sub = fun (a: Vec*; b: Vec*) => Vec {
    var result = Vec { a.x - b.x, a.y - b.y, a.z - b.z};
    return result;
}
let scaled = fun (a: Vec*; s: f32) => Vec {
    var result = Vec { a.x * s, a.y * s, a.z * s};
    return result;
}
let hadamard = fun (a: Vec*; b: Vec*) => Vec {
    var result = Vec { a.x * b.x, a.y * b.y, a.z * b.z};
    return result;
}
let normalize = fun (@a: Vec*) => void {
    var scl = 1.0 / Math::sqrt(x*x + y*y + z*z);
    x *= scl;
    y *= scl;
    z *= scl;
}
let normalized = fun (v: Vec*) => Vec {
    var result = *v;
    normalize(&result);
    return result;
}
let length = fun(@a: Vec*) => f32 {
    return Math::sqrt(x*x + y*y + z*z);
}
let sqr_length = fun(@a: Vec*) => f32 {
    var result = x*x + y*y + z*z;
    return result;
}

let dot = fun (a: Vec*; b: Vec*) => f32 {
    var result = a.x*b.x + a.y*b.y + a.z*b.z;
    return result;
}
let cross = fun (a: Vec*; b: Vec*) => Vec {
    var result = Vec 
    { 
        a.y * b.z - a.z * b.y, 
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    };
    return result;
}
let get_orthogonal = fun (v: Vec*) => Vec {
    var c0 = Vec {1.0, 0.0, 0.0};
    var c1 = Vec {0.0, 1.0, 0.0};
    var result = cross(v, &c0);
    if (sqr_length(&result) < 0.0001) {
        result = cross(v, &c1);
    }
    return result;
}

let Ray = struct 
(
    origin: Vec;
    direction: Vec;
);

mod ReflectionType
{
    let diffuse = 0;
    let mirror = 1;
    let glass = 2;
}

let Sphere = struct 
(
    radius: f32;
    pos: Vec;
    emission: Vec;
    color: Vec;
    reflection_type: i32;
);


let intersect_sphere_ray = fun (sphere: Sphere*; ray: Ray*; distance: f32*) => bool {
    var op = sub(&sphere.pos, &ray.origin);
    var b = dot(&op, &ray.direction);
    var det = b*b - dot(&op, &op) + sphere.radius * sphere.radius;

    if (det < 0.0) {
        return false;
    } else {
        det = Math::sqrt(det);
    }
    var eps = 0.02;
    var t = b - det;
    if (t > eps) {
        *distance = t;
        return true;
    } else {
        t = b + det;
        if (t > eps) {
            *distance = t;
            return true;
        } else {
            return false;
        }
    }
    return false;
}

let clamp_01 = fun (x: f32) => f32 {
    if (x < 0.0) {
        return 0.0;
    } elif (x > 1.0) {
        return 1.0;
    }
    return x;
}

let to_int = fun (x: f32) => i32 {
    var m = Math::pow(clamp_01(x), 1.0 / 2.2) * 255.0 + 0.5;
    return @i32 Math::trunc(m);
}

let intersect = fun(ray: Ray*; t: f32*; obj: Sphere**) => bool {
    let max = 100000000.0;
    *t = max;
    *obj = nullptr@Sphere*;
    
    var d: f32;
    for (var i = 0; i < sphere_count; ++i) {
        var s = spheres + i;
        if (intersect_sphere_ray(s, ray, &d) && d < *t) {
            *t = d;
            *obj = s;
        }
        s++;
    }

    return *t != max;
}

let radiance = fun(ray: Ray*; depth: i32; random_state: Random::state*) => Vec {
    var t = -1.0;
    var id = 0;
    var obj: Sphere*;
    if (!intersect(ray, &t, &obj)) {
        return vz;
    }
    assert(t >= 0);
    
    var color = obj.color;
    
    if (depth > 5) {
        var nax_refl = Math::max(color.x, Math::max(color.y, color.z));
        if (Random::rand_f32(0.0, 1.0, random_state) > nax_refl) {
            return obj.emission;
        } else {
            color = scaled(&color, 1.0 / nax_refl);
        }
        return color;
        // return obj.emission;
    }
    
    var delta = scaled(&ray.direction, t);
    var x = add(&ray.origin, &delta);
    var n = sub(&x, &obj.pos);
    normalize(&n);

    var nl = n;
    if (dot(&n, &ray.direction) >= 0)  {
        nl = scaled(&n, -1);
    }

    if (obj.reflection_type == ReflectionType::diffuse) {
        var r1 = Random::rand_f32(0, Math::tau_32, random_state);
        var r2 = Random::rand_f32(0.0, 1.0, random_state);
        var r2s = Math::sqrt(r2);
        var w = nl;
        var u = get_orthogonal(&w);
        normalize(&u);
        var v = cross(&w, &u);
        
        // get random vec on hemisphere
        var d1 = scaled(&u, Math::cos(r1) * r2s);
        var d2 = scaled(&v, Math::sin(r1) * r2s);
        var d3 = scaled(&w, Math::sqrt(1 - r2));
        var d = add(&d1, &d2);
        d = add(&d, &d3);

        var result = obj.emission;
        var random_ray = Ray{x, d};
        var recursive = radiance(&random_ray, depth + 1, random_state);
        recursive = hadamard(&color, &recursive);
        result = add(&result, &recursive);
        return result;
    } elif (obj.reflection_type == ReflectionType::mirror) {
        var random_ray: Ray;
        random_ray.origin = x;
        var proj_normal = scaled(&n, 2*dot(&n, &ray.direction));
        random_ray.direction = sub(&ray.direction, &proj_normal);
        var recursive = radiance(&random_ray, depth + 1, random_state);
        recursive = hadamard(&color, &recursive);
        var result = add(&recursive, &obj.emission);
        return result;
    } elif (obj.reflection_type == ReflectionType::glass) {
        var refl_ray: Ray;
        refl_ray.origin = x;
        var proj_normal = scaled(&n, 2*dot(&n, &ray.direction));
        refl_ray.direction = sub(&ray.direction, &proj_normal);
        var nc = 1.0;
        var nt = 1.5;
        var nnt: f32;
        var into = dot(&n, &nl) > 0.0;
        if (into) {
            nnt = nc / nt;
        } else {
            nnt = nt / nc;   
        }
        var ddn = dot(&ray.direction, &nl);
        var cos2t = 1.0 - nnt * nnt * (1.0 - ddn * ddn);
        if (cos2t < 0) {
            var recursive = radiance(&refl_ray, depth + 1, random_state);
            recursive = hadamard(&color, &recursive);
            var result = add(&recursive, &obj.emission);
            return result;
        }
        var tdir = scaled(&ray.direction, nnt);
        var n_refr: Vec;
        if (into) {
            n_refr = n;
        } else {
            n_refr = scaled(&n, -1);
        }
        var n_scl = ddn * nnt + Math::sqrt(cos2t);
        n_refr = scaled(&n_refr, n_scl);
        tdir = sub(&tdir, &n_refr);
        normalize(&tdir);
        var a = nt - nc;
        var b = nt + nc;
        var R0 = a * a / (1.0 * b * b);
        var c: f32;
        if (into) {
            c = 1 + ddn;
        } else {
            c = 1 - dot(&tdir, &n);
        }
        var Re = R0 + (1 - R0) * c * c * c * c * c;
        var Tr = 1 - Re;
        var P = 0.25 + 0.5 * Re;
        var RP = Re / P;
        var TP = Tr / (1 - P);

        var result = obj.emission;
        if (depth > 2) {
            if (Random::rand_f32(0, 1.0, random_state) < P) {
                var recursive = radiance(&refl_ray, depth + 1, random_state);
                recursive = scaled(&recursive, RP);
                result = add(&result, &recursive);
                return hadamard(&result, &color);
            } else {
                var r = Ray{x, tdir};
                var recursive = radiance(&r, depth + 1, random_state);
                recursive = scaled(&recursive, TP);
                result = add(&result, &recursive);
                return hadamard(&result, &color);
            }
        } else {
            var recursive = radiance(&refl_ray, depth + 1, random_state);
            recursive = scaled(&recursive, Re);
            result = add(&result, &recursive);
            
            var r = Ray{x, tdir};
            recursive = radiance(&r, depth + 1, random_state);
            recursive = scaled(&recursive, Tr);
            result = add(&result, &recursive);
            return hadamard(&result, &color);
        }
    } else {
        return vz;
    }
    return vz;
}

let sphere_count = 9;
var spheres: Sphere*;

// crashes the compiler
// let debug_spheres = fun() => void{
//     var s2 = Sphere { 10000.0, Vec { 10001.0, 40.8, 81.6 }, vz, Vec {0.75, 0.25, 0.25} };
// }

let create_spheres = fun() => void {
    
    spheres = @Sphere* VirtualAlloc(nullptr,(size_of(Sphere)@mm) * sphere_count@mm,
               MEM_COMMIT, PAGE_READWRITE);
    var s = spheres;
    let big = 10000.0;
    
    // 0
    s.radius   = big;
    s.pos      = v3(big + 1, 40.8, 81.6);
    s.emission = vz;
    s.color    = v3(0.75, 0.25, 0.25);
    s.reflection_type = ReflectionType::diffuse;
    s++;
    // 1
    s.radius   = big;
    s.pos      = v3(-big + 99, 40.8, 81.6);
    s.emission = vz;
    s.color    = v3(0.25, 0.25, 0.75);
    s.reflection_type = ReflectionType::diffuse;
    s++;
    // 2
    s.radius   = big;
    s.pos      = v3(50, 40.8, big);
    s.emission = vz;
    s.color    = v3(0.75, 0.75, 0.75);
    s.reflection_type = ReflectionType::diffuse;
    s++;
    // 3
    s.radius   = big;
    s.pos      = v3(50, 40.8, -big + 170);
    s.emission = vz;
    s.color    = vz;
    s.reflection_type = ReflectionType::diffuse;
    s++;
    // 4
    s.radius   = big;
    s.pos      = v3(50, big, 81.6);
    s.emission = vz;
    s.color    = v3(0.75, 0.75, 0.75);
    s.reflection_type = ReflectionType::diffuse;
    s++;
    // 5
    s.radius   = big;
    s.pos      = v3(50, -big + 81.6, 81.6);
    s.emission = vz;
    s.color    = v3(0.75, 0.75, 0.75);
    s.reflection_type = ReflectionType::diffuse;
    s++;
    // 6
    s.radius   = 16.5;
    s.pos      = v3(27, 16.5, 47);
    s.emission = vz;
    s.color    = v3(0.999, 0.999, 0.999);
    s.reflection_type = ReflectionType::mirror;
    s++;
    // 7
    s.radius   = 16.5;
    s.pos      = v3(73, 16.5, 78);
    s.emission = vz;
    s.color    = v3(0.999, 0.999, 0.999);
    s.reflection_type = ReflectionType::glass;
    s++;
    // 8
    s.radius   = 600;
    s.pos      = v3(50, 681.6 - 0.27, 81.6);
    s.emission = v3(12.0, 12.0, 12.0);
    s.color    = vz;
    s.reflection_type = ReflectionType::diffuse;
}

let platform_write_file = fun (name: string; data: ptr; size_in_bytes: i32) => bool {
    var handle = CreateFileA(cstr(name), GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, 0, 0);
    if (handle == null) {
        CloseHandle(handle);
        return false;
    }
    var bytes_written: i32 = 0;
    var result = WriteFile(handle, data, size_in_bytes, &bytes_written, nullptr);
    if (result != 0) {
        CloseHandle(handle);
        assert(size_in_bytes == bytes_written);
        return true;
    } else {
        CloseHandle(handle);
        return false;
    }

    CloseHandle(handle);
    return false;
}


let Tile = struct 
(
    cam: Ray;
    cam_x: Vec;
    cam_y: Vec;
    width: i32;
    height: i32;

    sx: i32;
    sy: i32;
    samples: i32;
    start: Vec*;
    tile_size: i32;
);

let render_tile_position = fun (sx: i32; sy: i32) => void {
    var buf = window.backbuffer;
    var start: i8* = buf.memory;
    start += sy * buf.pitch;
    start += 4 * sx;


    let color: i32 = 0xFFFFFFFF;
    
    var up_row = @i32* start;
    var down_row = @i32* (start + buf.pitch * (tile_size - 1));
    for (var x = 0; x < tile_size; ++x) {
        *up_row++ = color;
        *down_row++ = color;
    }

    var left_column = @i32* start;
    var right_column = @i32* (start + 4 * (tile_size - 1));
    for (var y = 0; y < tile_size; ++y) {
        *left_column = color;
        *right_column = color;
        left_column += buf.width;
        right_column += buf.width;
    }
}

let render_tile = fun (@tile: Tile*; random_state: Random::state*) => void {
    var buf = window.backbuffer;
    render_tile_position(sx, sy);
    var p = start;    
    for (var y = 0; y < tile_size; ++y) {
        var pixels = p;
        for (var x = 0; x < tile_size; ++x) {
            var sample_radiance = vz;
            for (var s = 0; s < samples; ++s) {
                var r1 = Random::rand_f32(0, 2.0, random_state);
                var dx: f32;
                if (r1 < 1.0) {
                    dx = Math::sqrt(r1) - 1;
                } else {
                    dx = 1.0 - Math::sqrt(2 - r1);
                }
                var r2 = Random::rand_f32(0, 2.0, random_state);
                var dy: f32;
                if (r2 < 1.0) {
                    dy = Math::sqrt(r2) - 1;
                } else {
                    dy = 1.0 - Math::sqrt(2 - r2);
                }
                
                var px = (sx@f32 + x@f32 + 0.5*dx) / width@f32;
                var py = (sy@f32 + y@f32 + 0.5*dy) / height@f32;

                var scx = scaled(&cam_x, px - 0.5);
                var scy = scaled(&cam_y, py - 0.5);
                var d = cam.direction;
                d = add(&d, &scx);
                d = add(&d, &scy);
                normalize(&d);

                var rp = cam.origin;
                var push_d = scaled(&d, 140);
                rp = add(&rp, &push_d);
                var sample_ray = Ray{rp, d};
                
                var r = radiance(&sample_ray, 0, random_state);
                sample_radiance = add(&sample_radiance, &r);
            }
            var sr = scaled(&sample_radiance, 1.0 / @f32 samples);
           
            *pixels++ = sr;
        }
        p += width;
    }

    var tile_row = start;    

    var row: i8* = buf.memory;
    row += sy * buf.pitch;
    row += 4 * sx;
    for (var y = 0; y < tile_size; ++y) {
        var tile_samples = tile_row;
        var pixel = @i32* row;
        for (var x = 0; x < tile_size; ++x) {
            var v = *tile_samples++;
            var r = to_int(v.x);
            var g = to_int(v.y);
            var b = to_int(v.z);
            *pixel++ = (r << 16) | (g << 8) | (b << 0);

        }
        tile_row += width;
        row += buf.pitch;
    }
}


let RenderJob = struct 
(
    random_state: Random::state;
    thread_idx: i32;
    thread_count: i32;
    tiles: Tile*;
    tiles_count: i32;
    completed: bool;
);

let do_render_job = fun (@job: RenderJob*) => i32 {
    var seed = i32_4x { (thread_idx+1) * 123469, (thread_idx+1) * 1293888, (thread_idx+1) * 3928383, (thread_idx + 1) * (-324299) };
    
    Random::init_seed(seed, &random_state);
    var idx = thread_idx;
    while (idx < tiles_count) {
        // print("thread ");
        // print(thread_idx);
        // print(" start rendering tile #");
        // print(idx);
        // print("\n");

        render_tile(tiles + idx, &random_state);

        // print("thread ");
        // print(thread_idx);
        // print(" finished rendering tile #");
        // print(idx);
        // print("\n");
        idx += thread_count;
    }
    // print_string("thread #");
    // print_i32(thread_idx);
    // print_string(" completed\n");
    completed = true;
    return 0;
}


let offscreen_buffer = struct
(
    info:   BITMAPINFO;
    memory: ptr;
    width:  i32;
    height: i32;
    pitch:  i32;
);
let window_state = struct 
(
    handle: mm;
    dc: mm;
    width: i32;
    height: i32;
    wants_to_quit: bool;
    backbuffer: offscreen_buffer;
);

var window: window_state;

let create_backbuffer = fun 
(
    @buffer: offscreen_buffer*;
    target_width: i32;
    target_height: i32) => void
{
    let bytes_per_pixel = 4;
    width = target_width;
    height = target_height;
    info.header.biSize = 40;
    info.header.biWidth = width;
    info.header.biHeight = height;
    info.header.biPlanes = 1;
    info.header.biBitCount = 32;
    info.header.biCompression = BI_RGB;
    var bitmap_size = bytes_per_pixel * width * height;
    if (memory != nullptr) {
        VirtualFree(memory, null, MEM_RELEASE);
    }
    memory = VirtualAlloc(nullptr, bitmap_size@\mm, MEM_COMMIT, PAGE_READWRITE);
    pitch = buffer.width * bytes_per_pixel;
}

let blit_to_screen = fun (window_dc: mm; @buffer: offscreen_buffer*) => void {
    StretchDIBits(window.dc,
        0, 0, buffer.width, buffer.height,
        0, 0, buffer.width, buffer.height, 
        buffer.memory, &buffer.info,
        DIB_RGB_COLORS, SRCCOPY);
}


let process_pending_messages = fun() => void {
    var msg: MSG;
    while (PeekMessageA(&msg, null, 0, 0, PM_REMOVE|PM_NOYIELD) != 0) {
        var message = msg.message;
        if (message == WM_QUIT) {
            window.wants_to_quit = true;
        } 
        elif (message == WM_SYSKEYDOWN
            || message == WM_SYSKEYUP
            || message == WM_KEYDOWN
            || message == WM_KEYUP) {

            var w_param = @i32 (msg.wParam >> 32@mm);
            var l_param = @i32 (msg.lParam >> 32@mm);
            var vk_code = w_param;

            var was_down = (l_param & (1 << 30)) != 0;
            var is_down = (l_param & (1 << 31)) == 0;
            var key_up = was_down && !is_down;
            var key_down = !was_down && is_down; 

            if(vk_code == VK_ESCAPE) {
                window.wants_to_quit = true;
            }
        } else {
            TranslateMessage(&msg);
            DispatchMessageA(&msg);
        }
    }
}

let PROCESS_SYSTEM_DPI_AWARE = 1;
let SetProcessDpiAwareness = extern fun(
    value: i32;
) => i32;

let main_window_callback = fun
(
    window_handle: mm;
    message: i32;
    w_param: mm;
    l_param: mm;
) => mm {
    var result = null;
    if (message == WM_SIZE || message == WM_SIZING) {
    }
    elif (message == WM_CLOSE) {
        window.wants_to_quit = true;
    }
    elif (message == WM_DESTROY) {
        window.wants_to_quit = true;
    }
    elif (message == WM_PAINT) {
        var paint: PAINTSTRUCT;
        var context = BeginPaint(window_handle, &paint);
        blit_to_screen(window.dc, &window.backbuffer);
        EndPaint(window_handle, &paint);
    } 
    else {
        result = DefWindowProcA(window_handle, message, w_param, l_param);
    }
    return result;
}

let get_perf_counter = fun() => i64 {
    var result: i64;
    QueryPerformanceCounter(&result);
    return result;
}


let x_tiles = 2*8;
let y_tiles = 2*6;
let samples = 512;
let tile_size = 64;
let thread_count = 8;

[
	"compile.output": "smallpt_win.exe",
	"compile.entry" : "true",
    "compile.cpu"   : "native",
    "compile.debuginfo": "false",
 	"compile.opt"   : "0",
    "compile.asm"   : "false",
    "compile.ll"    : "true",
 	"compile.run"   : "false",
 	"compile.libs"  : "kernel32.lib, user32.lib, gdi32.lib, shcore.lib, libopenlibm.a",
	"compile.path"  : "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.14393.0\um\x64, lib"
]
let main = fun() => void {
    var perf_count_freq: i64;
    QueryPerformanceFrequency(&perf_count_freq);

#if FALSE
    SetProcessDpiAwareness(PROCESS_SYSTEM_DPI_AWARE);
#endif

    var t0 = get_perf_counter();
    
    let buffer_width  = x_tiles * tile_size;
    let buffer_height = y_tiles * tile_size;

    // debug_print_i32("buffer_height", buffer_height);

    var client_rect = RECT { 0, 0, buffer_width, buffer_height };
    AdjustWindowRectEx(&client_rect, dw_style, 0, dw_ex_style);

    window.width = client_rect.right - client_rect.left;
    assert(window.width > 0);
    window.height = client_rect.bottom - client_rect.top;
    assert(window.height > 0);
    
    // debug_print_i32("window_height", window.height);
    
    create_backbuffer(&window.backbuffer, buffer_width, buffer_height);
    assert(window.backbuffer.memory != nullptr);

    var class_name  = cstr("smallpt_windowclass\0");
    var window_name = cstr("smallpt\0");
    var module_handle = GetModuleHandleA(null);
    var window_class = WNDCLASSEX {};
    window_class.cbSize = @i32 (size_of(WNDCLASSEX));
    window_class.style = CS_HREDRAW|CS_VREDRAW;
    window_class.lpfnWndProc = @ptr main_window_callback;
    window_class.hInstance = module_handle;
    window_class.lpszClassName = class_name;
    window_class.hCursor = LoadCursorA(null, IDC_ARROW);
    RegisterClassExA(&window_class);
    
    let dw_style = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_VISIBLE;
    // let dw_ex_style = WS_EX_TOPMOST;
    let dw_ex_style = 0;
 
    window.handle = CreateWindowExA(
        dw_ex_style,
        class_name,
        window_name,
        dw_style,
        CW_USEDEFAULT,
        CW_USEDEFAULT,
        window.width,
        window.height,
        null,
        null,
        module_handle,
        null
    );
    window.dc = GetDC(window.handle);

    start_render();

    while (!window.wants_to_quit) {
        process_pending_messages();
        blit_to_screen(window.dc, &window.backbuffer);
        Sleep(100);
        if (check_render_jobs_done()) {
            window.wants_to_quit = true;
        }
    }

    var t1 = get_perf_counter();
    var t = (t1-t0)@f64 / @f64 perf_count_freq;
    debug_print("seconds elapsed: ", t);

    ExitProcess(0);
}

var render_jobs: RenderJob*;
var render_job_count = -1;
let check_render_jobs_done = fun () => bool {
    var all_completed = true;
    for (var i = 0; i < render_job_count; ++i) {
        // TODO(pragma): volatile!
        var rj = render_jobs + i;
        if (!rj.completed) {
            all_completed = false;
            break;
        }
    }
    return all_completed;
}

let start_render = fun () => void {
    create_spheres();
    
    let width  = x_tiles * tile_size;
    let height = y_tiles * tile_size;

    debug_print("width", width);
    debug_print("height", height);

    var pixel_data = @Vec* VirtualAlloc(nullptr, size_of(Vec) * @mm width * @mm height, MEM_COMMIT, PAGE_READWRITE);

    var cam: Ray;
    cam.origin = v3(50,52,295.6);
    cam.direction = v3(0, -0.042612, -1);
    normalize(&cam.direction);

    let fov = 0.5135;
    var cam_x = v3(@f32 width * fov / height@f32, 0, 0);
    var cam_y = cross(&cam_x, &cam.direction);
    normalize(&cam_y);
    cam_y = scaled(&cam_y, fov);


    // create tiles
    var tile_count = x_tiles * y_tiles;
    var tiles = @Tile* VirtualAlloc(nullptr, size_of(Tile) * @mm tile_count, MEM_COMMIT, PAGE_READWRITE);
    var idx = 0;
    for (var j = 0; j < y_tiles; ++j) {
        for (var i = 0; i < x_tiles; ++i) {
            var t = tiles + idx++;
            t.sx = tile_size * i;
            t.sy = tile_size * j;
            t.start = pixel_data + (t.sy * width + t.sx);
            t.tile_size = tile_size;
            t.width = width;
            t.height = height;
            t.cam = cam;
            t.cam_x = cam_x;
            t.cam_y = cam_y;
            t.samples = samples;
        }
    }

    // create jobs
    render_jobs = @RenderJob* VirtualAlloc(nullptr, size_of(RenderJob) * @mm thread_count, MEM_COMMIT, PAGE_READWRITE);
    render_job_count = thread_count;

    var j = RenderJob {};
    for (var i = 0; i < render_job_count; ++i) {
        j.thread_idx = i;
        j.thread_count = thread_count;
        j.tiles = tiles;
        j.tiles_count = tile_count;
        j.completed = false;
        *(render_jobs + i) = j;
    }

    // create and run threads
    for (var i = 0; i < render_job_count; ++i) {
        var job = render_jobs + i;
        var thread_id: mm;
        var thread_handle = CreateThread(nullptr, null, do_render_job@ThreadProc, job@ptr, 0, &thread_id);
    }
}
